<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[DBA Plus]]></title>
  <link href="https://saup007.github.io/atom.xml" rel="self"/>
  <link href="https://saup007.github.io/"/>
  <updated>2018-06-09T11:16:20+08:00</updated>
  <id>https://saup007.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Docker]]></title>
    <link href="https://saup007.github.io/15013380113380.html"/>
    <updated>2017-07-29T22:20:11+08:00</updated>
    <id>https://saup007.github.io/15013380113380.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">基本命令</h2>

<p>列出已经下载下来的镜像(顶级镜像)<br/>
docker images</p>

<p>显示所有镜像，包括中间层镜像<br/>
docker images -a</p>

<p>列出关于 ubntu 的镜像<br/>
docker images ubuntu</p>

<p>列出指定仓库名、标签的镜像<br/>
docker images ubuntu:16.04</p>

<p>虚悬镜像(dangling image) <br/>
docker images -f dangling=true</p>

<p>删除虚悬镜像<br/>
docker rmi $(docker images -q -f dangling=true)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL登陆验证 & old password]]></title>
    <link href="https://saup007.github.io/15007225406040.html"/>
    <updated>2017-07-22T19:22:20+08:00</updated>
    <id>https://saup007.github.io/15007225406040.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">一、MySQL 客户端连接的两种方式</a>
<ul>
<li>
<a href="#toc_1">1. -hlocalhost</a>
</li>
<li>
<a href="#toc_2">2. socket 方式连接</a>
</li>
<li>
<a href="#toc_3">3. -h127.0.0.1 方式连接</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">二、MySQL 登陆验证</a>
<ul>
<li>
<a href="#toc_5">1、Host、User</a>
</li>
<li>
<a href="#toc_6">2、Password</a>
</li>
</ul>
</li>
<li>
<a href="#toc_7">3、权限变更</a>
</li>
<li>
<a href="#toc_8">4、短密码升级方法</a>
</li>
<li>
<a href="#toc_9">三、MySQL 5.7</a>
</li>
<li>
<a href="#toc_10">四、 SSL</a>
</li>
</ul>


<span id="more"></span><!-- more -->

<h2 id="toc_0">一、MySQL 客户端连接的两种方式</h2>

<p>参考：<a href="http://dev.mysql.com/doc/refman/5.5/en/can-not-connect-to-server.html">B.5.2.2 Can&#39;t connect to [local] MySQL server</a></p>

<p>连接 MySQL 两种方式，一种是通过  Unix socket (default /emp/mysql.sock) ，另外一种是 TCP/IP 。</p>

<p>     socket 比 TCP/IP 更快的方式，但仅能在同一台机器才可以访问<br/>
     socket 在没有指定 hostname 或指定 localhost 时使用</p>

<p>所以 -h localhost 是通过 socket 方式访问 MySQL，-h 127.0.0.1 是通过 TCP/IP 访问 MySQL。</p>

<p>MySQL 用户列表</p>

<pre><code>mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user;
+-------+--------------+-------------------------------------------+-----------------------+
| user  | host         | password                                  | plugin                |
+-------+--------------+-------------------------------------------+-----------------------+
| root  | localhost    | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| root  | dbaone       | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| root  | 127.0.0.1    | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| root  | ::1          | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| test1 | %            | 773359240eb9a1d9                          | mysql_old_password    |
| root  | %            | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| root  | 192.168.56.% | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| test2 | %            | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 | mysql_native_password |
+-------+--------------+-------------------------------------------+-----------------------+
8 rows in set (0.00 sec)
</code></pre>

<h3 id="toc_1">1. -hlocalhost</h3>

<p>默认是找 socket 文件，不能连接因为sock不是默认位置。</p>

<pre><code># mysql -uroot -proot -hlocalhost -P 3308 -e &quot;select user(); status ;&quot;
**ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock&#39; (2)**
</code></pre>

<h3 id="toc_2">2. socket 方式连接</h3>

<p>status 显示通过 UNIX socket 方式连接</p>

<pre><code># mysql -uroot -proot -S /tmp/mysql-3308.sock  -e &quot;select user(); status ;&quot;
+----------------+
| user()         |
+----------------+
| root@localhost |
+----------------+
--------------
mysql  Ver 14.14 Distrib 5.5.15, for Linux (x86_64) using  EditLine wrapper

Connection id:        14
Current database:   
**Current user:        root@localhost**
SSL:            Not in use
Current pager:        stdout
Using outfile:        &#39;&#39;
Using delimiter:    ;
Server version:        5.6.35-log Source distribution
Protocol version:    10
**Connection:        Localhost via UNIX socket**
Server characterset:    utf8
Db     characterset:    utf8
Client characterset:    utf8
Conn.  characterset:    utf8
UNIX socket:        /tmp/mysql-3308.sock
Uptime:            2 hours 44 min 38 sec

Threads: 2  Questions: 68  Slow queries: 0  Opens: 70  Flush tables: 1  Open tables: 63  Queries per second avg: 0.006
--------------
</code></pre>

<h3 id="toc_3">3. -h127.0.0.1 方式连接</h3>

<p>status 显示通过 TCP/IP 连接，但为什么不是 root@127.0.0.1 而是 root@localhost ，这个就是第二部分，MySQL 登陆验证的部分。</p>

<pre><code># mysql -uroot -proot -h127.0.0.1 -P 3308 -e &quot;select user(); status ;&quot;
+----------------+
| user()         |
+----------------+
| root@localhost |
+----------------+
--------------
mysql  Ver 14.14 Distrib 5.5.15, for Linux (x86_64) using  EditLine wrapper

Connection id:        13
Current database:   
**Current user:        root@localhost**
SSL:            Not in use
Current pager:        stdout
Using outfile:        &#39;&#39;
Using delimiter:    ;
Server version:        5.6.35-log Source distribution
Protocol version:    10
**Connection:        127.0.0.1 via TCP/IP**
Server characterset:    utf8
Db     characterset:    utf8
Client characterset:    utf8
Conn.  characterset:    utf8
TCP port:        3308
Uptime:            2 hours 42 min 42 sec

Threads: 2  Questions: 62  Slow queries: 0  Opens: 70  Flush tables: 1  Open tables: 63  Queries per second avg: 0.006
--------------
</code></pre>

<h2 id="toc_4">二、MySQL 登陆验证</h2>

<p>参考：</p>

<p><a href="https://dev.mysql.com/doc/refman/5.5/en/connection-access.html">6.2.4 Access Control, Stage 1: Connection Verification</a></p>

<p><a href="http://blog.csdn.net/zbszhangbosen/article/details/7434154">mysql 空用户（user 列为空）带来的影响</a></p>

<h3 id="toc_5">1、Host、User</h3>

<p>MySQL 用户验证一般是（Host、User、Password），但先验证 Host，再验证 User，最后验证 Password</p>

<blockquote>
<p>Your identity is based on two pieces of information:<br/>
- The client host from which you connect<br/>
- Your MySQL user name</p>
</blockquote>

<ul>
<li>如果 Host 是空的，则代表任何主机可以登陆。5.5、5.6 初始化 Host 默认不会为空</li>
<li>如果 User 是空的，则代表可以匹配任何用户。5.5、5.6 初始化 localhost 和当前机器 hostname 的 User 为空</li>
<li>如果 Password 是空的，则代表不需要密码就可以登陆。</li>
</ul>

<p>当 MySQL 启动时，会把所有权限相当的表数据读到内存中(包括 mysql.user )，有一定排序规则。当用户登陆时，匹配到第一个记录就是要检验的记录。</p>

<ul>
<li>首先按 Host 排序，第一位是特别的主机名或IP，% 意味任何不特定的主机，任何主机都可以访问，&#39;&#39; 也表示任何主机都可以访问，但排在 % 之后。（相同意义的 hostname、IP，默认使用hostname，添加参数skip-name-resolve后，使用IP）</li>
<li>IP 不受子网掩网影响，因此 192.168.1.13 和 192.168.1.0/255.255.255.0 都是特别指定的，排序是没有办法确认先后。</li>
<li>相同 Host，再按 User 排序。</li>
</ul>

<p>参考官方文档例子：</p>

<p>表中记录是这样</p>

<pre><code>+-----------+----------+-
| Host      | User    | ...
+-----------+----------+-
| %        | root    | ...
| %        | jeffrey  | ...
| localhost | root    | ...
| localhost |          | ...
+-----------+----------+-
</code></pre>

<p>读到内存中的是这样</p>

<pre><code>+-----------+----------+-
| Host      | User    | ...
+-----------+----------+-
| localhost | root    | ...
| localhost |          | ...
| %        | jeffrey  | ...
| %        | root    | ...
+-----------+----------+-
</code></pre>

<p>如果从 localhost 登陆，用户名为 jeffrey，第一感觉应该是 jeffrey@% 的记录，实际是 jeffrey@localhost，因为先匹配 Host，localhost 是匹配的，usr为空，代表任何用户都可以，host、user匹配结果后，就不会再往下匹配了。(当然要忽略 password )</p>

<p>按规则指定 &quot;主机名&quot;或IP，都属于第一顺序 ，那localhost 和 127.0.01 哪个更优先？</p>

<pre><code># cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.56.101 dbaone
192.168.56.102 dbatwo
</code></pre>

<p>下面已经演示的，通过 127.0.0.1 连接，当前用户却是 root@localhost，不是 root@127.0.0.1，说明主机名排在IP前面，也可能默认以主机名缓存验证(host cache)。</p>

<pre><code># mysql -uroot -proot -h127.0.0.1 -P 3308 -e &quot;select user(); status ;&quot;
+----------------+
| user()         |
+----------------+
| root@localhost |
+----------------+
--------------
mysql  Ver 14.14 Distrib 5.5.15, for Linux (x86_64) using  EditLine wrapper

Connection id:        13
Current database:   
**Current user:        root@localhost**
SSL:            Not in use
Current pager:        stdout
Using outfile:        &#39;&#39;
Using delimiter:    ;
Server version:        5.6.35-log Source distribution
Protocol version:    10
**Connection:        127.0.0.1 via TCP/IP**
Server characterset:    utf8
Db     characterset:    utf8
Client characterset:    utf8
Conn.  characterset:    utf8
TCP port:        3308
Uptime:            2 hours 42 min 42 sec

Threads: 2  Questions: 62  Slow queries: 0  Opens: 70  Flush tables: 1  Open tables: 63  Queries per second avg: 0.006
</code></pre>

<p>当我修改 root@localhost 的密码，但不修改 root@127.0.0.1 的密码，说明匹配 mysql.user 中 host=localhost，user=root 这行，直接报密码错误，即使 hos=127.0.0.1，user=root 是正确的。</p>

<pre><code>mysql@localhost.(none)&gt;update mysql.user set password=password(&#39;rootroot&#39;) where user=&#39;root&#39; and host=&#39;localhost&#39;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql@localhost.(none)&gt;flush privileges;
Query OK, 0 rows affected (0.18 sec)

mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;root&#39;;
+------+--------------+-------------------------------------------+-----------------------+
| user | host         | password                                  | plugin                |
+------+--------------+-------------------------------------------+-----------------------+
| root | localhost    | *6C362347EBEAA7DF44F6D34884615A35095E80EB | mysql_native_password |**
| root | dbaone       | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| root | 127.0.0.1    | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| root | ::1          | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| root | %            | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| root | 192.168.56.% | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
+------+--------------+-------------------------------------------+-----------------------+
6 rows in set (0.00 sec)

# mysql -uroot -proot -h127.0.0.1 -P 3308 -e &quot;select user(); status ;&quot;
ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)

</code></pre>

<p>当然，如果将 skip-name-resolve 加到 my.cnf，重启MySQL，直接匹配 root@127.0.0.1，就可以登陆了。</p>

<pre><code>mysql@localhost.(none)&gt;show variables like &#39;%skip_name_resolve%&#39;;
+------------------------+-------+
| Variable_name          | Value |
+------------------------+-------+
**| skip_name_resolve      | ON    |**
+------------------------+-------+
1 rows in set (0.00 sec)

# mysql -uroot -proot -h127.0.0.1 -P 3308 -e &quot;select user(); status ;&quot;
+----------------+
| user()         |
+----------------+
| root@127.0.0.1 |
+----------------+
--------------
mysql  Ver 14.14 Distrib 5.5.15, for Linux (x86_64) using  EditLine wrapper

Connection id:        2
Current database:   
**Current user:        root@127.0.0.1**
SSL:            Not in use
Current pager:        stdout
Using outfile:        &#39;&#39;
Using delimiter:    ;
Server version:        5.6.35-log Source distribution
Protocol version:    10
**Connection:        127.0.0.1 via TCP/IP**
Server characterset:    utf8
Db     characterset:    utf8
Client characterset:    utf8
Conn.  characterset:    utf8
TCP port:        3308
Uptime:            27 sec

Threads: 2  Questions: 9  Slow queries: 0  Opens: 70  Flush tables: 1  Open tables: 63  Queries per second avg: 0.333
--------------
</code></pre>

<p>恢复环境 root@localhost 密码</p>

<pre><code>mysql@localhost.(none)&gt;update mysql.user set password=password(&#39;root&#39;) where user=&#39;root&#39; and host=&#39;localhost&#39;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql@localhost.(none)&gt;flush privileges;
Query OK, 0 rows affected (0.00 sec)
</code></pre>

<h3 id="toc_6">2、Password</h3>

<p>参考：</p>

<p><a href="http://mysql.taobao.org/monthly/2016/05/02/">MySQL · 特性分析 · MySQL 5.7 新特性系列一</a></p>

<p><a href="https://dev.mysql.com/doc/refman/5.6/en/account-upgrades.html">Migrating Away from Pre-4.1 Password Hashing and the mysql_old_password Plugin</a></p>

<p>密码在 MySQL 版本不同</p>

<pre><code>在 MySQL 4.1 之前，password() 生成 16 位的密码
在 MySQL 4.1 开始，password() 生成 41 位的密码，old_password() 兼容之前版本的 password()，但在 5.7.5被移除、
old_passwords = 1，使password() 相当old_password()，在 MySQL 5.7.5 以后，old_password 只有0和2，没有1.
</code></pre>

<table>
<thead>
<tr>
<th>Value</th>
<th>Password Hashing Method</th>
<th>Associated Authentication Plugin</th>
</tr>
</thead>

<tbody>
<tr>
<td>0</td>
<td>MySQL 4.1 native hashing</td>
<td>mysql_native_password</td>
</tr>
<tr>
<td>1</td>
<td>Pre-4.1 (“old”) hashing</td>
<td>mysql_old_password</td>
</tr>
<tr>
<td>2</td>
<td>SHA-256 hashing</td>
<td>sha256_password</td>
</tr>
</tbody>
</table>

<p>关于 password，涉及 mysql.user 表中2个字段。一个是 password(5.5、5.6)(authentication_string 5.7)、一个是 plugin</p>

<ul>
<li>plugin 在 5.5 ，可以为空，无默认值</li>
<li>plugin 在 5.6 ，可以为空，默认值为mysql_native_password</li>
<li><p>plugin 在 5.7 ，不可为空，默认值为mysql_native_password</p></li>
<li><p>passowrd 在 5.5、5.6 均是 NOT NULL char(41)</p></li>
<li><p>password 在 5.7 已经不存在，存储密码字段是 authentication_string text类型（这个字段在5.5、5.6也存在）</p></li>
</ul>

<p>所以验证的判断方法</p>

<ul>
<li>当 plugin = mysql_old_password 时，登陆验证以 16 位短密码验证</li>
<li>当 plugin = mysql_native_password 时，登陆验证以 41 位长密码验证</li>
<li>当 plugin 为空时，会根据 password 存储的密码来决定以 mysql_old_password - 还是 mysql_native_password 来验证</li>
</ul>

<p>在 MySQL 5.6.5 以后，如果 password 为16位短密码，且 plugin = mysql_old_password 依然不能登陆。</p>

<p>因为 secure-auth 在 &gt;= 5.6.5 以后默认为 ON，不接受客户端 16位短密码 ，在 &gt;= 5.7.5 以后只有ON，没有OFF。</p>

<pre><code>mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user;
+-------+--------------+-------------------------------------------+-----------------------+
| user  | host         | password                                  | plugin                |
+-------+--------------+-------------------------------------------+-----------------------+
| root  | localhost    | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| root  | dbaone       | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| root  | 127.0.0.1    | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| root  | ::1          | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| test1 | %            | 773359240eb9a1d9                          | mysql_old_password    |
| root  | %            | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| root  | 192.168.56.% | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B | mysql_native_password |
| test2 | %            | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 | mysql_native_password |
+-------+--------------+-------------------------------------------+-----------------------+
8 rows in set (0.00 sec)

# mysql -utest1 -p123 -S /tmp/mysql-3308.sock
ERROR 1275 (HY000): Server is running in --secure-auth mode, but &#39;test1&#39;@&#39;localhost&#39; has a password in the old format; please change the password to the new format

# mysql -utest1 -p123 -S /tmp/mysql-3308.sock --skip-secure-auth
ERROR 1275 (HY000): Server is running in --secure-auth mode, but &#39;test1&#39;@&#39;localhost&#39; has a password in the old format; please change the password to the new format

解决：重启 MySQL

vim my.cnf

[mysqld]
secure-auth = OFF

[mysql]
secure_auth = 0
</code></pre>

<p>论证1：  password 与 plugin 匹配才能正常登陆 （secure-auth = OFF）</p>

<pre><code>mysql@localhost.(none)&gt;select version();
+------------+
| version()  |
+------------+
| 5.6.35-log |
+------------+
1 row in set (0.00 sec)

mysql@localhost.(none)&gt;set old_passwords=1;
Query OK, 0 rows affected (0.00 sec)

mysql@localhost.(none)&gt;show  variables like &#39;%old_passwords%&#39;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| old_passwords | 1     |
+---------------+-------+
1 row in set (0.00 sec)

mysql@localhost.(none)&gt;create user test1@&#39;%&#39; identified by &quot;123&quot;;
ERROR 1396 (HY000): Operation CREATE USER failed for &#39;test1&#39;@&#39;%&#39;

mysql@localhost.(none)&gt;grant all on test.* to test1@&#39;%&#39; identified by &quot;123&quot;;
ERROR 1827 (HY000): The password hash doesn&#39;t have the expected format. Check if the correct password algorithm is being used with the PASSWORD() function.

mysql@localhost.(none)&gt;set old_passwords=0;
Query OK, 0 rows affected (0.00 sec)

mysql@localhost.(none)&gt;create user test1@&#39;%&#39; identified by &quot;123&quot;;
ERROR 1396 (HY000): Operation CREATE USER failed for &#39;test1&#39;@&#39;%&#39;

mysql@localhost.(none)&gt;grant all on test.* to test1@&#39;%&#39; identified by &quot;123&quot;;
Query OK, 0 rows affected (0.00 sec)

在 old_password = 1，5.6已经不允许生成 old_password 密码了。

mysql@localhost.(none)&gt;set old_passwords=0;
Query OK, 0 rows affected (0.00 sec)

mysql@localhost.(none)&gt;show  variables like &#39;%old_passwords%&#39;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| old_passwords | 0     |
+---------------+-------+
1 row in set (0.00 sec)

mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test1&#39;;
Empty set (0.00 sec)

mysql@localhost.(none)&gt;grant all on test.* to test1@&#39;%&#39; identified by &quot;123&quot;;
Query OK, 0 rows affected (0.00 sec)

mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test1&#39;;
+-------+------+-------------------------------------------+-----------------------+
| user  | host | password                                  | plugin                |
+-------+------+-------------------------------------------+-----------------------+
| test1 | %    | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 | mysql_native_password |
+-------+------+-------------------------------------------+-----------------------+
1 row in set (0.00 sec)

这个可以在客户端尝试登陆，是可以登陆的。

root@dbaone mysql_3308]# mysql -utest1 -p123 -S /tmp/mysql-3308.sock
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 44
Server version: 5.6.35-log Source distribution

Copyright (c) 2000, 2010, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

mysql@localhost.(none)&gt;select user(),sysdate();
+-----------------+---------------------+
| user()          | sysdate()           |
+-----------------+---------------------+
| test1@localhost | 2017-01-17 15:58:40 |
+-----------------+---------------------+
1 row in set (0.00 sec)

当修改为 old password

mysql@localhost.(none)&gt;set old_passwords=1;
Query OK, 0 rows affected (0.00 sec)

mysql@localhost.(none)&gt;update mysql.user set password=password(&#39;123&#39;),plugin=&#39;mysql_old_password&#39; where user=&#39;test1&#39;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql@localhost.(none)&gt;flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test1&#39;;
+-------+------+------------------+--------------------+
| user  | host | password         | plugin             |
+-------+------+------------------+--------------------+
| test1 | %    | 773359240eb9a1d9 | mysql_old_password |
+-------+------+------------------+--------------------+
1 row in set (0.00 sec)

[root@dbaone mysql_3308]# mysql -utest1 -p123 -S /tmp/mysql-3308.sock
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 4
Server version: 5.6.35-log Source distribution

Copyright (c) 2000, 2010, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

mysql@localhost.(none)&gt;show variables like &#39;%secure_auth%&#39;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| secure_auth   | OFF   |
+---------------+-------+
1 row in set (0.00 sec)
</code></pre>

<p>论证2： plugin 为空，登陆依赖 password 存储格式选择方法验证登陆 （secure-auth = OFF）</p>

<pre><code>mysql@localhost.(none)&gt;set old_passwords=0;
Query OK, 0 rows affected (0.04 sec)

mysql@localhost.(none)&gt;update mysql.user set password=password(&#39;123&#39;),plugin=&#39;&#39; where user=&#39;test1&#39;;
Query OK, 1 row affected (0.04 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql@localhost.(none)&gt;flush privileges;
Query OK, 0 rows affected (0.06 sec)

mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test1&#39;;
+-------+------+-------------------------------------------+--------+
| user  | host | password                                  | plugin |
+-------+------+-------------------------------------------+--------+
| test1 | %    | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |        |
+-------+------+-------------------------------------------+--------+
1 row in set (0.04 sec)

# mysql -utest1 -p -hlocalhost -P 3311 -S /tmp/mysql3311.sock
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 104306286
Server version: 5.6.24-log Source distribution

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the buffer.

mysql&gt; select user(),sysdate();
+-----------------+---------------------+
| user()          | sysdate()           |
+-----------------+---------------------+
| test1@localhost | 2017-01-17 15:50:54 |
+-----------------+---------------------+
1 row in set (0.00 sec)

是可以登陆的

如果 password、与 plugin 不匹配，则不能登陆

mysql@localhost.(none)&gt;set old_passwords=0;
Query OK, 0 rows affected (0.04 sec)

mysql@localhost.(none)&gt;update mysql.user set password=password(&#39;123&#39;),plugin=&#39;mysql_old_password&#39; where user=&#39;test1&#39;;
Query OK, 1 row affected (0.04 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test1&#39;;
+-------+------+-------------------------------------------+--------------------+
| user  | host | password                                  | plugin             |
+-------+------+-------------------------------------------+--------------------+
| test1 | %    | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 | mysql_old_password |
+-------+------+-------------------------------------------+--------------------+
1 row in set (0.04 sec)

mysql@localhost.(none)&gt;flush privileges;
Query OK, 0 rows affected (0.06 sec)

[root@gaea227 ~]# mysql -utest1 -p -hlocalhost -P 3311 -S /tmp/mysql3311.sock
Enter password:
ERROR 1045 (28000): Access denied for user &#39;test1&#39;@&#39;localhost&#39; (using password: YES)
</code></pre>

<p>清除测试用户</p>

<pre><code>mysql@localhost.(none)&gt;delete from mysql.user where user=&#39;test1&#39;;
Query OK, 1 row affected (0.03 sec)

mysql@localhost.(none)&gt;flush privileges;
Query OK, 0 rows affected (0.06 sec)

mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test1&#39;;
Empty set (0.03 sec)
</code></pre>

<p>也可以使用不同 PHP 来测试，PHP 5.2与PHP5.6，下面是PHP脚本</p>

<pre><code>&lt;?php
/**
 * 运行示例：
 *
 * root@vagrant-ubuntu-trusty-64:/vagrant# php php5_mysql.php
 * Array
 * (
 *   [0] =&gt; 2017-01-17 15:15:39
 * )
 */

$host=&quot;192.168.1.100:3311&quot;;
$username=&quot;test2&quot;;
$passwd=&quot;123&quot;;

# 数据库连接
#$link = mysqli_connect($host, $username, $passwd) or die(&#39;Unale to connect&#39;);
$link = mysql_connect($host, $username, $passwd) or die(&#39;Unale to connect&#39;);

if (!$link) {
    die(&#39;Could not connect: &#39; . mysql_error());
}
echo &#39;Connected successfully&#39;;

$sql = &quot;select sysdate();&quot;;
$result = mysql_query($sql,$link);
$row = mysql_fetch_row($result);
print_r($row);

# 执行查询，获取结果
#$sql = &quot;select sysdate();&quot;;
#$result = mysqli_query($link, $sql);
#$row = mysqli_fetch_row($result);
#print_r($row);

# 关闭数据库连接
#mysqli_close($link);
mysql_close($link);
</code></pre>

<h2 id="toc_7">3、权限变更</h2>

<p><a href="https://dev.mysql.com/doc/refman/5.5/en/privilege-changes.html">6.2.6 When Privilege Changes Take Effect</a></p>

<p>当使用 DDL 语法， GRANT, REVOKE, SET PASSWORD, or RENAME USER 时，立刻把 授权表 load 到内存存</p>

<p>     在下面测试中，如果 mysql.user 已经存在的权限，还是需要 flush privileges; 刷新权限的</p>

<p>当使用 DML 语法，INSERT, UPDATE, or DELETE 时，需要执行 flush privileges ，手工load。</p>

<p>     表、列的权限，影响下次访问<br/>
     DB的权限，影响下次执行 use DB</p>

<h2 id="toc_8">4、短密码升级方法</h2>

<p>MySQL 版本 ?<br/>
update ?<br/>
grant ?</p>

<p>方法一、grant 覆盖 （单节点）</p>

<p>MySQL 5.5.15</p>

<pre><code>mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test&#39;;
+------+------+------------------+--------+
| user | host | password         | plugin |
+------+------+------------------+--------+
| test | %    | 773359240eb9a1d9 |        |
+------+------+------------------+--------+
1 row in set (0.00 sec)

mysql@localhost.(none)&gt;show variables like &#39;%old_passwords%&#39;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| old_passwords | OFF   |
+---------------+-------+
1 row in set (0.00 sec)

mysql@localhost.(none)&gt;grant all on test.* to test@&#39;%&#39; identified by &quot;123&quot;;
Query OK, 0 rows affected (0.00 sec)

# 已经存在的权限，一定要flush，才可以登陆

mysql@localhost.(none)&gt;flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test&#39;;
+------+------+-------------------------------------------+--------+
| user | host | password                                  | plugin |
+------+------+-------------------------------------------+--------+
| test | %    | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |        |
+------+------+-------------------------------------------+--------+
1 row in set (0.00 sec)
</code></pre>

<p>MySQL 5.6.35</p>

<pre><code>mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test&#39;;
+------+------+------------------+--------------------+
| user | host | password         | plugin             |
+------+------+------------------+--------------------+
| test | %    | 773359240eb9a1d9 | mysql_old_password |
+------+------+------------------+--------------------+
1 row in set (0.00 sec)

mysql@localhost.(none)&gt;show variables like &#39;%old_passwords%&#39;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| old_passwords | 0     |
+---------------+-------+
1 row in set (0.00 sec)

mysql@localhost.(none)&gt;grant all on test.* to test@&#39;%&#39; identified by &quot;123&quot;;
ERROR 1827 (HY000): The password hash doesn&#39;t have the expected format. Check if the correct password algorithm is being used with the PASSWORD() function.

看样子走不通，plugin = mysql_old_password 不能通过 grant 方法覆盖。还是要直接 update。
</code></pre>

<p>方法二：update mysql.user（单节点）</p>

<p>MySQL 5.5.15</p>

<pre><code>mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test&#39;;
+------+------+------------------+--------+
| user | host | password         | plugin |
+------+------+------------------+--------+
| test | %    | 773359240eb9a1d9 |        |
+------+------+------------------+--------+
1 row in set (0.00 sec)

mysql@localhost.(none)&gt;show variables like &#39;%old_passwords%&#39;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| old_passwords | OFF   |
+---------------+-------+
1 row in set (0.00 sec)

mysql@localhost.(none)&gt;update mysql.user set password=password(&#39;123&#39;) where user=&#39;test&#39;;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql@localhost.(none)&gt;flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test&#39;;
+------+------+-------------------------------------------+--------+
| user | host | password                                  | plugin |
+------+------+-------------------------------------------+--------+
| test | %    | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 |        |
+------+------+-------------------------------------------+--------+
1 row in set (0.00 sec)

# 测试可以登陆
# mysql -utest -p123 -e &quot;select user();&quot;
+----------------+
| user()         |
+----------------+
| test@localhost |
+----------------+

# 若 update 更新 password 还更新 plugin ？

mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test&#39;;
+------+------+------------------+--------+
| user | host | password         | plugin |
+------+------+------------------+--------+
| test | %    | 773359240eb9a1d9 |        |
+------+------+------------------+--------+
1 row in set (0.00 sec)

mysql@localhost.(none)&gt;show variables like &#39;%old_passwords%&#39;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| old_passwords | OFF   |
+---------------+-------+
1 row in set (0.00 sec)

mysql@localhost.(none)&gt;update mysql.user set password=password(&#39;123&#39;),plugin=&#39;mysql_native_password&#39; where user=&#39;test&#39;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql@localhost.(none)&gt;flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test&#39;;
+------+------+-------------------------------------------+-----------------------+
| user | host | password                                  | plugin                |
+------+------+-------------------------------------------+-----------------------+
| test | %    | *23AE809DDACAF96AF0FD78ED04B6A265E05AA257 | mysql_native_password |
+------+------+-------------------------------------------+-----------------------+
1 row in set (0.00 sec)

# mysql -utest -p123 -e &quot;select user();&quot;
+-----------------+
| user()          |
+-----------------+
| test1@localhost |
+-----------------+
</code></pre>

<p>MySQL 5.6.35</p>

<pre><code>mysql@localhost.(none)&gt;select user,host,password,plugin from mysql.user where user=&#39;test&#39;;
+------+------+------------------+--------------------+
| user | host | password         | plugin             |
+------+------+------------------+--------------------+
| test | %    | 773359240eb9a1d9 | mysql_old_password |
+------+------+------------------+--------------------+
1 row in set (0.00 sec)

mysql@localhost.(none)&gt;show variables like &#39;%old_passwords%&#39;;
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| old_passwords | 0     |
+---------------+-------+
1 row in set (0.00 sec)

mysql@localhost.(none)&gt;update mysql.user set password=password(&#39;123&#39;),plugin=&#39;mysql_native_password&#39; where user=&#39;test&#39;;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql@localhost.(none)&gt;flush privileges;
Query OK, 0 rows affected (0.00 sec)

# 测试可以登陆
# mysql -utest -p123 -S /tmp/mysql-3308.sock -e &quot;select user();&quot;
+----------------+
| user()         |
+----------------+
| test@localhost |
+----------------+
</code></pre>

<p>grant 只适用于 5.5，5.6还是得通过直接 update 更新。</p>

<p><strong>短密码升级流程：A -&gt; B -&gt; C -&gt; D</strong></p>

<pre><code>检查 Master、Salve 的 old_passwords 、secure_auth 参数值
检查 Master、Slave MySQL 版本（特别注意 Master、Slave 版本不一致）
</code></pre>

<p>如果 old_passwords = 1</p>

<pre><code>****
**A.**
****
**Master:**

set global old_passwords = 0;

show global variables like &#39;%old_passwords%&#39;;

修改 my.cnf 配置文件

B.

**Slave:**

stop slave;

set global old_passwords = 0;

show global variables like &#39;%old_passwords%&#39;;

start slave;

修改配置文件
</code></pre>

<p>如果 MySQL 版本是 5.5</p>

<pre><code>C.

update mysql.user set password = password(&#39;XXX&#39;) where user = &#39;XXX&#39;;

select length(password) from mysql.user where user = &#39;XXX&#39;;

flush privileges;
</code></pre>

<p>如果 MySQL 版本是 5.6</p>

<pre><code>C.

update mysql.user set password=password(&#39;XXX&#39;),plugin=&#39;mysql_native_password&#39; where user=&#39;XXX&#39;;

select length(password) from mysql.user where user = &#39;XXX&#39;;

flush privileges;
</code></pre>

<p>最后登陆验证：</p>

<pre><code>
D.

登陆验证

</code></pre>

<p>如果 Master 是5.5、Slave 是 5.6的异构，可以按 5.6 升级方法，或者单独升级 Master 和 Slave。</p>

<p>最后，升级密码还是应该用脚本去执行的。</p>

<h2 id="toc_9">三、MySQL 5.7</h2>

<ul>
<li>mysql_old_password 验证插件被删除</li>
<li>old_password() 函数被删除</li>
<li>old_passwords 系统变量，不再允许值为1</li>
<li>secure_auth 系统变量，不再允许值为0</li>
<li>--skip-secure-auth 被弃用</li>
<li>default_password_lifetime  5.7.4引入, &lt;= 5.7.10 值为360,1年过期,5.7.11以后为0，没有密码过期限制</li>
</ul>

<blockquote>
<p>Pre-4.1 passwords 已经被弃用，old_passwords 不能设置为1了、secure_auth 不能设置为 OFF了。<br/>
一定要在升级 MySQL 5.7 前将短密码升级，否则 mysql_upgrade 会把password 列删除，迁移到 authentication_string 只迁移长密码的用户</p>
</blockquote>

<h2 id="toc_10">四、 SSL</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装 Performance Monitor]]></title>
    <link href="https://saup007.github.io/15001793154180.html"/>
    <updated>2017-07-16T12:28:35+08:00</updated>
    <id>https://saup007.github.io/15001793154180.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">前期准备：</a>
<ul>
<li>
<a href="#toc_1">安装依赖</a>
</li>
<li>
<a href="#toc_2">安装gpperfmon</a>
</li>
</ul>
</li>
<li>
<a href="#toc_3">安装 greenplum cc web</a>
<ul>
<li>
<a href="#toc_4">更改权限 &amp; 环境变量</a>
</li>
<li>
<a href="#toc_5">创建 Command Center 实例</a>
</li>
<li>
<a href="#toc_6">启动服务</a>
</li>
</ul>
</li>
</ul>


<span id="more"></span><!-- more -->

<p>参考：</p>

<p><a href="http://www.greenplumdba.com/setting-up-greenplum-command-center">Installing and enabling Greenplum Command Center</a></p>

<p><a href="http://www.zhongweicheng.com/?p=858">Installation GreenPlum Performance Monitor</a></p>

<p><a href="http://blog.csdn.net/jameswangcnbj/article/details/50740383">GreenPlum安装性能监控工具GPCCC（Greenplum Command Center Console）</a></p>

<h2 id="toc_0">前期准备：</h2>

<pre><code>a. 创建greenplum监控用数据库(gpperfmon)

b. 创建greenplum监控用数据库角色(gpmon)

c. 配置greenplum数据库接受来自perfmon监控的链接文件(pg_hba.conf和.pgpass)

d. 设置postgresql.conf文件，增加启用监控的参数。（这些参数默认会添加在文件的末尾）

gp_enable_gpperfmon=on
gpperfmon_port=8888
gp_external_enable_exec=on
gpperfmon_log_alert_level=warning

e. 设置pg_hba.conf文件，增加如下信息：

      local    gpperfmon         gpmon         md5
      host     all               gpmon         127.0.0.1/28    md5
</code></pre>

<!-- more -->

<h3 id="toc_1">安装依赖</h3>

<p>yum install vixie-cron -y   # 若 gpcc要安装 workload manaager，需要安装这个</p>

<h3 id="toc_2">安装gpperfmon</h3>

<p>[gpadmin@dbaone ~]$ gpperfmon_install --enable --password 123456 --port 5432</p>

<blockquote>
<p>20160412:16:10:01:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-PGPORT=5432 psql -f /opt/greenplum/greenplum-db/./lib/gpperfmon/gpperfmon3.sql template1 &gt;&amp; /dev/null<br/>
20160412:16:10:11:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-PGPORT=5432 psql -f /opt/greenplum/greenplum-db/./lib/gpperfmon/gpperfmon4.sql gpperfmon &gt;&amp; /dev/null<br/>
20160412:16:10:12:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-PGPORT=5432 psql -f /opt/greenplum/greenplum-db/./lib/gpperfmon/gpperfmon41.sql gpperfmon &gt;&amp; /dev/null<br/>
20160412:16:10:14:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-PGPORT=5432 psql -f /opt/greenplum/greenplum-db/./lib/gpperfmon/gpperfmon42.sql gpperfmon &gt;&amp; /dev/null<br/>
20160412:16:10:17:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-PGPORT=5432 psql -f /opt/greenplum/greenplum-db/./lib/gpperfmon/gpperfmonC.sql template1 &gt;&amp; /dev/null<br/>
20160412:16:10:17:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-PGPORT=5432 psql template1 -c &quot;DROP ROLE IF EXISTS gpmon&quot;  &gt;&amp; /dev/null<br/>
20160412:16:10:17:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-PGPORT=5432 psql template1 -c &quot;CREATE ROLE gpmon WITH SUPERUSER CREATEDB LOGIN ENCRYPTED PASSWORD &#39;123456&#39;&quot;  &gt;&amp; /dev/null<br/>
20160412:16:10:17:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-echo &quot;local    gpperfmon         gpmon         md5&quot; &gt;&gt; /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1/pg_hba.conf<br/>
20160412:16:10:17:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-echo &quot;host     all         gpmon         127.0.0.1/28    md5&quot; &gt;&gt; /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1/pg_hba.conf<br/>
20160412:16:10:17:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-touch /home/gpadmin/.pgpass &gt;&amp; /dev/null<br/>
20160412:16:10:17:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-mv -f /home/gpadmin/.pgpass /home/gpadmin/.pgpass.1460448601 &gt;&amp; /dev/null<br/>
20160412:16:10:17:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-echo &quot;*:5432:gpperfmon:gpmon:123456&quot; &gt;&gt; /home/gpadmin/.pgpass<br/>
20160412:16:10:17:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-cat /home/gpadmin/.pgpass.1460448601 &gt;&gt; /home/gpadmin/.pgpass<br/>
20160412:16:10:17:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-chmod 0600 /home/gpadmin/.pgpass &gt;&amp; /dev/null<br/>
20160412:16:10:17:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-PGPORT=5432 gpconfig -c gp_enable_gpperfmon -v on &gt;&amp; /dev/null<br/>
20160412:16:10:23:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-PGPORT=5432 gpconfig -c gpperfmon_port -v 8888 &gt;&amp; /dev/null<br/>
20160412:16:10:29:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-PGPORT=5432 gpconfig -c gp_external_enable_exec -v on --masteronly &gt;&amp; /dev/null<br/>
20160412:16:10:35:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-PGPORT=5432 gpconfig -c gpperfmon_log_alert_level -v warning &gt;&amp; /dev/null<br/>
20160412:16:10:40:019577 gpperfmon_install:dbaone:gpadmin-[INFO]:-gpperfmon will be enabled after a full restart of GPDB</p>
</blockquote>

<pre><code> # 跑一些脚本，创建表和视图
</code></pre>

<p>[gpadmin@dbaone ~]\( ll \)GPHOME/lib/gpperfmon/<br/>
total 56<br/>
-rwxr-xr-x 1 gpadmin gpadmin 18339 Nov 13 15:44 gpperfmon3.sql<br/>
-rwxr-xr-x 1 gpadmin gpadmin  9051 Nov 13 15:44 gpperfmon41.sql<br/>
-rwxr-xr-x 1 gpadmin gpadmin 14407 Nov 13 15:44 gpperfmon42.sql<br/>
-rwxr-xr-x 1 gpadmin gpadmin  3277 Nov 13 15:44 gpperfmon4.sql<br/>
-rwxr-xr-x 1 gpadmin gpadmin   250 Nov 13 15:44 gpperfmonC.sql</p>

<pre><code> # 重启gp生效
</code></pre>

<p>[gpadmin@dbaone ~]$ gpstop -afr</p>

<blockquote>
<p>20160412:16:40:14:020911 gpstop:dbaone:gpadmin-[INFO]:-Starting gpstop with args: -afr<br/>
20160412:16:40:14:020911 gpstop:dbaone:gpadmin-[INFO]:-Gathering information and validating the environment...<br/>
20160412:16:40:14:020911 gpstop:dbaone:gpadmin-[INFO]:-Obtaining Greenplum Master catalog information<br/>
20160412:16:40:14:020911 gpstop:dbaone:gpadmin-[INFO]:-Obtaining Segment details from master...<br/>
20160412:16:40:15:020911 gpstop:dbaone:gpadmin-[INFO]:-Greenplum Version: &#39;postgres (Greenplum Database) 4.3.6.2 build 1&#39;<br/>
20160412:16:40:15:020911 gpstop:dbaone:gpadmin-[INFO]:-There are 0 connections to the database<br/>
20160412:16:40:15:020911 gpstop:dbaone:gpadmin-[INFO]:-Commencing Master instance shutdown with mode=&#39;fast&#39;<br/>
20160412:16:40:15:020911 gpstop:dbaone:gpadmin-[INFO]:-Master host=dbaone<br/>
20160412:16:40:15:020911 gpstop:dbaone:gpadmin-[INFO]:-Detected 0 connections to database<br/>
20160412:16:40:15:020911 gpstop:dbaone:gpadmin-[INFO]:-Using standard WAIT mode of 120 seconds<br/>
20160412:16:40:15:020911 gpstop:dbaone:gpadmin-[INFO]:-Commencing Master instance shutdown with mode=fast<br/>
20160412:16:40:15:020911 gpstop:dbaone:gpadmin-[INFO]:-Master segment instance directory=/opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1<br/>
20160412:16:40:16:020911 gpstop:dbaone:gpadmin-[INFO]:-Attempting forceful termination of any leftover master process<br/>
20160412:16:40:16:020911 gpstop:dbaone:gpadmin-[INFO]:-Terminating processes for segment /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1<br/>
20160412:16:40:16:020911 gpstop:dbaone:gpadmin-[INFO]:-Stopping master standby host dbafour mode=fast<br/>
20160412:16:40:17:020911 gpstop:dbaone:gpadmin-[INFO]:-Successfully shutdown standby process on dbafour<br/>
20160412:16:40:17:020911 gpstop:dbaone:gpadmin-[INFO]:-Commencing parallel primary segment instance shutdown, please wait...<br/>
20160412:16:40:17:020911 gpstop:dbaone:gpadmin-[INFO]:-0.00% of jobs completed<br/>
20160412:16:40:27:020911 gpstop:dbaone:gpadmin-[INFO]:-100.00% of jobs completed<br/>
20160412:16:40:27:020911 gpstop:dbaone:gpadmin-[INFO]:-Commencing parallel mirror segment instance shutdown, please wait...<br/>
20160412:16:40:27:020911 gpstop:dbaone:gpadmin-[INFO]:-0.00% of jobs completed<br/>
20160412:16:40:37:020911 gpstop:dbaone:gpadmin-[INFO]:-100.00% of jobs completed<br/>
20160412:16:40:37:020911 gpstop:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160412:16:40:37:020911 gpstop:dbaone:gpadmin-[INFO]:-   Segments stopped successfully      = 12<br/>
20160412:16:40:37:020911 gpstop:dbaone:gpadmin-[INFO]:-   Segments with errors during stop   = 0<br/>
20160412:16:40:37:020911 gpstop:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160412:16:40:37:020911 gpstop:dbaone:gpadmin-[INFO]:-Successfully shutdown 12 of 12 segment instances<br/>
20160412:16:40:37:020911 gpstop:dbaone:gpadmin-[INFO]:-Database successfully shutdown with no errors reported<br/>
20160412:16:40:37:020911 gpstop:dbaone:gpadmin-[INFO]:-Cleaning up leftover gpmmon process<br/>
20160412:16:40:37:020911 gpstop:dbaone:gpadmin-[INFO]:-No leftover gpmmon process found<br/>
20160412:16:40:37:020911 gpstop:dbaone:gpadmin-[INFO]:-Cleaning up leftover gpsmon processes<br/>
20160412:16:40:37:020911 gpstop:dbaone:gpadmin-[INFO]:-No leftover gpsmon processes on some hosts. not attempting forceful termination on these hosts<br/>
20160412:16:40:37:020911 gpstop:dbaone:gpadmin-[INFO]:-Cleaning up leftover shared memory<br/>
20160412:16:40:42:020911 gpstop:dbaone:gpadmin-[INFO]:-Restarting System...</p>
</blockquote>

<p>[gpadmin@dbaone ~]\( ps -ef | grep gpmmon | grep -v grep<br/>
gpadmin  21113 21104  0 16:40 ?        00:00:00 /opt/greenplum/greenplum-db-4.3.6.2/bin/gpmmon -D /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1/gpperfmon/conf/gpperfmon.conf -p 5432<br/>
[gpadmin@dbaone ~]\)<br/>
[gpadmin@dbaone ~]$ ps -ef | grep greenplum | grep -v grep<br/>
gpadmin  21104     1  0 16:40 ?        00:00:00 /opt/greenplum/greenplum-db-4.3.6.2/bin/postgres -D /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1 -p 5432 -b 1 -z 6 --silent-mode=true -i -M master -C -1 -x 14 -E<br/>
gpadmin  21113 21104  0 16:40 ?        00:00:00 /opt/greenplum/greenplum-db-4.3.6.2/bin/gpmmon -D /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1/gpperfmon/conf/gpperfmon.conf -p 5432<br/>
gpadmin  21393     1  0 16:40 ?        00:00:00 /opt/greenplum/greenplum-db/./bin/gpsmon -m 0 -i -t 150 -l /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1/gpperfmon/logs -v 0 8888</p>

<p>[gpadmin@dbaone ~]$ psql<br/>
psql (8.2.15)<br/>
Type &quot;help&quot; for help.</p>

<p>testdb=# \l<br/>
                  List of databases<br/>
   Name    |  Owner  | Encoding |  Access privileges<br/>
-----------+---------+----------+---------------------<br/>
 gpperfmon | gpadmin | UTF8     | gpadmin=CTc/gpadmin<br/>
                                : =c/gpadmin<br/>
 postgres  | gpadmin | UTF8     |<br/>
 template0 | gpadmin | UTF8     | =c/gpadmin<br/>
                                : gpadmin=CTc/gpadmin<br/>
 template1 | gpadmin | UTF8     | =c/gpadmin<br/>
                                : gpadmin=CTc/gpadmin<br/>
 testdb    | gpadmin | UTF8     |<br/>
(5 rows)</p>

<p>testdb=# select * from pg_user;<br/>
 usename | usesysid | usecreatedb | usesuper | usecatupd |  passwd  | valuntil | useconfig<br/>
---------+----------+-------------+----------+-----------+----------+----------+-----------<br/>
 gpadmin |       10 | t           | t        | t         | ******** |          |<br/>
 gpmon   |    19414 | t           | t        | t         | ******** |          |<br/>
(2 rows)</p>

<p>testdb=# \du<br/>
                       List of roles<br/>
 Role name |            Attributes             | Member of<br/>
-----------+-----------------------------------+-----------<br/>
 gpadmin   | Superuser, Create role, Create DB |<br/>
 gpmon     | Superuser, Create DB              |</p>

<pre><code> # 确认Performance Monitor数据库写入数据是否正常，检查是否有记录写入 「若第1次没有结果，等几秒再试一次」
</code></pre>

<p>[gpadmin@dbaone ~]$ psql gpperfmon -c &#39;SELECT * FROM system_now;&#39;<br/>
        ctime        | hostname | mem_total  |  mem_used  | mem_actual_used | mem_actual_free | swap_total | swap_used | swap_page_in | swap_page_out | cpu_user | cpu_sys | cpu_idle | load0 | load1 | load2 | quantum | disk_ro_rate | disk_wo_rate | disk_rb_rate | disk_wb<br/>
<u>rate | net</u>rp_rate | net_wp_rate | net_rb_rate | net_wb_rate<br/>
---------------------+----------+------------+------------+-----------------+-----------------+------------+-----------+--------------+---------------+----------+---------+----------+-------+-------+-------+---------+--------------+--------------+--------------+--------<br/>
------+-------------+-------------+-------------+-------------<br/>
 2016-04-12 16:47:45 | dbatwo   | 8254828544 | 8112623616 |      1895161856 |      6359666688 |  536866816 |         0 |            0 |             0 |     0.05 |    0.05 |     99.9 |     0 |  0.01 |     0 |      15 |            0 |            0 |            0 |<br/>
    0 |          16 |           9 |       21129 |       20901<br/>
 2016-04-12 16:47:45 | dbafour  | 8254828544 | 7996710912 |      1393299456 |      6861529088 |  536866816 |    253952 |            0 |             0 |     0.07 |    0.07 |    99.83 |  0.06 |  0.06 |  0.02 |      15 |            0 |            1 |            0 |<br/>
14229 |          17 |          11 |       21225 |       41669<br/>
 2016-04-12 16:47:45 | dbaone   | 8254828544 | 8084590592 |      3054915584 |      5199912960 |  536866816 |         0 |            0 |             0 |     0.35 |     0.2 |    99.45 |     0 |     0 |     0 |      15 |            0 |            2 |            0 |<br/>
 8715 |          22 |          17 |        2977 |        1907<br/>
 2016-04-12 16:47:45 | dbathree | 8254828544 | 8094613504 |      1864966144 |      6389862400 |  536866816 |   1363968 |            0 |             0 |     0.03 |    0.05 |    99.92 |  0.04 |  0.03 |     0 |      15 |            0 |            1 |            0 |<br/>
10893 |          17 |          11 |       41906 |       20978<br/>
(4 rows)</p>

<blockquote>
<p>将必要的 .pgpass 、pg_hba.conf 传到 standby master上</p>
</blockquote>

<p>[gpadmin@dbaone ~]$ scp .pgpass dbafour:/home/gpadmin/<br/>
.pgpass</p>

<p>[gpadmin@dbaone ~]\( scp \)MASTER_DATA_DIRECTORY/pg_hba.conf dbafour:/$MASTER_DATA_DIRECTORY/pg_hba.conf<br/>
pg_hba.conf</p>

<h2 id="toc_3">安装 greenplum cc web</h2>

<p>[root@dbaone greenplum-cc-web]# ./greenplum-cc-web-2.0.0-build-32-RHEL5-x86_64.bin</p>

<pre><code>********************************************************************************
Do you accept the Pivotal Greenplum Database end user license
agreement? [yes | no]
********************************************************************************

yes

********************************************************************************
Provide the installation path for Greenplum Command Center or
press ENTER to accept the default installation path:     

/usr/local/greenplum-cc-web-2.0.0-build-32
********************************************************************************

/opt/greenplum/greenplum-cc-web-2.0.0-build-32

********************************************************************************
Install Greenplum Command Center into &lt;/opt/greenplum/greenplum-cc-web-2.0.0-build-32&gt;? [yes | no]
********************************************************************************

yes

Extracting product to /opt/greenplum/greenplum-cc-web-2.0.0-build-32

********************************************************************************
Installation complete.
Greenplum Command Center is installed in /opt/greenplum/greenplum-cc-web-2.0.0-build-32

To complete the environment configuration, please ensure that the
gpcc_path.sh file is sourced.
********************************************************************************
</code></pre>

<h3 id="toc_4">更改权限 &amp; 环境变量</h3>

<p>[root]# chown gpadmin.gpadmin -R /opt/greenplum/greenplum-cc-web</p>

<p>[root]# chown gpadmin.gpadmin -R /opt/greenplum/greenplum-cc-web-2.0.0-build-32/</p>

<blockquote>
<p>加载环境变量 gpadmin &amp;&amp; root</p>
</blockquote>

<p>vim .bashrc</p>

<pre><code># For GP web
source /opt/greenplum/greenplum-cc-web/gpcc_path.sh
</code></pre>

<p>source ~/.bashrc</p>

<blockquote>
<p>修改权限</p>
</blockquote>

<p>vim $MASTER_DATA_DIRECTORY/pg_hba.conf</p>

<pre><code> host    gpperfmon   gpmon           ::1/128    md5
</code></pre>

<p>$ gpstop -u</p>

<blockquote>
<p>将 Master安装的，拷贝到 其他节点</p>
</blockquote>

<p>$ gpccinstall -f  /opt/greenplum/greenplum-db/conf/hostlist</p>

<h3 id="toc_5">创建 Command Center 实例</h3>

<p>[gpadmin@dbaone ~]$ gpcmdr --setup</p>

<pre><code>An instance name is used by the Greenplum Command Center as
a way to uniquely identify a Greenplum Database that has the monitoring
components installed and configured.  This name is also used to control
specific instances of the Greenplum Command Center web UI.  Instance names
can contain letters, digits and underscores and are not case sensitive.

Please enter a new instance name:
&gt; Mr_Liu_gp
The web component of the Greenplum Command Center can connect to a
monitor database on a remote Greenplum Database.

Is the master host for the Greenplum Database remote? Yy|Nn  (default=N):
&gt;
  The display name is shown in the web interface and does not need to be a hostname.

What would you like to use for the display name for this instance:
&gt; greenplum_test
What port does the Greenplum Database use? (default=5432):
&gt;
Creating instance schema in GPDB.  Please wait ...
The display name is shown in the web interface and does not need to bea hostname.

Would you like to install workload manager? Yy|Nn (default=N):        ## 若与master不在一台机器上，是不能选择y的。
&gt;
Skipping installation of workload manager.
The Greenplum Command Center runs a small web server for the UI and web API.
This web server by default runs on port 28080, but you may specify any available port.

What port would you like the web server to use for this instance? (default=28080):
&gt;
Users logging in to the Command Center must provide database user
credentials.  In order to protect user names and passwords, it is recommended 
that SSL be enabled.

Do you want to enable SSL for the Web API Yy|Nn (default=N):
&gt;

Do you want to enable ipV6 for the Web API Yy|Nn (default=N):
&gt;

Do you want to enable Cross Site Request Forgery Protection for the Web API Yy|Nn (default=N):
&gt;

Do you want to copy the instance to a standby master host Yy|Nn (default=Y):
&gt;
What is the hostname of the standby master host? [smdw]: dbafour
standby is dbafour

Done writing lighttpd configuration to /opt/greenplum/greenplum-cc-web/./instances/mr_liu_gp/conf/lighttpd.conf
Done writing web UI configuration to /opt/greenplum/greenplum-cc-web/./instances/mr_liu_gp/conf/gpperfmonui.conf
  Done writing web UI clustrs configuration to /opt/greenplum/greenplum-cc-web/./instances/mr_liu_gp/conf/clusters.conf

Copying instance &#39;mr_liu_gp&#39; to host &#39;dbafour&#39;...

Greenplum Command Center UI configuration is now complete.  If
at a later date you want to change certain parameters, you can
either re-run &#39;gpcmdr --setup&#39; or edit the configuration file
located at /opt/greenplum/greenplum-cc-    web/./instances/mr_liu_gp/conf/gpperfmonui.conf.

The web UI for this instance is available at http://dbaone:28080/

You can now start the web UI for this instance by running: gpcmdr -- start mr_liu_gp
No instances
</code></pre>

<p>vim /opt/greenplum/greenplum-cc-web/www/gpmonws.py</p>

<pre><code> # 修改连接 Greenplum database 恒为真

# This service can be called without a login
# To check if GPDB is up or not
# this can be used by the GUI to decide weather to display login screen or gpstart screen
class gpdbup:
  def GET(self):
    web.header(&#39;Content-Type&#39;, &#39;text/xml&#39;)
    web.header(&#39;Cache-Control&#39;, &#39;no-store&#39;)

    cleanKrbFile()
    database_up = False

    try:
        database_up = db.is_gpdb_running(gpdb_server_name)
    except db.GPDBError, errorinfo:
        return mkerr(error.DATA_ACCESS, errorinfo.__str__())

    #return render.gpdbup(database_up)
    return render.gpdbup(True)
</code></pre>

<p>or</p>

<pre><code> # 修改连接 Master的主机名

# This service can be called without a login
# To check if GPDB is up or not
# this can be used by the GUI to decide weather to display login screen or gpstart screen
class gpdbup:
def GET(self):
    web.header(&#39;Content-Type&#39;, &#39;text/xml&#39;)
    web.header(&#39;Cache-Control&#39;, &#39;no-store&#39;)

    cleanKrbFile()
    database_up = False

    try:
        #database_up = db.is_gpdb_running(gpdb_server_name)
        database_up = db.is_gpdb_running(&#39;dbaone&#39;)
    except db.GPDBError, errorinfo:
        return mkerr(error.DATA_ACCESS, errorinfo.__str__())

    return render.gpdbup(database_up)
</code></pre>

<p>若不修改文件，则为下面状况：</p>

<p><img src="media/15001793154180/15285120185980.png" alt=""/></p>

<h3 id="toc_6">启动服务</h3>

<p>$ gpcmdr --start mr_liu_gp</p>

<p><a href="http://dbaone:28080/">http://dbaone:28080/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Greenplum 安装篇]]></title>
    <link href="https://saup007.github.io/15001790106489.html"/>
    <updated>2017-07-16T12:23:30+08:00</updated>
    <id>https://saup007.github.io/15001790106489.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>目录：</p>
</blockquote>

<ul>
<li>
<a href="#toc_0">第一部分 - Linux Configuration 「所有节点」</a>
<ul>
<li>
<a href="#toc_1">Add User 「所有节点执行」添加用户</a>
</li>
<li>
<a href="#toc_2">关闭 SELinux 、 iptables</a>
</li>
<li>
<a href="#toc_3">Yum 「防止初始化失败，ed 命令来修改配置文件」</a>
</li>
<li>
<a href="#toc_4">配置主机名 hosts</a>
</li>
<li>
<a href="#toc_5">配置内核参数</a>
</li>
<li>
<a href="#toc_6">配置资源限制</a>
</li>
<li>
<a href="#toc_7">XFS 分区</a>
</li>
<li>
<a href="#toc_8">设置Linux调度器规则，默认为 CFQ ，更改为 deadline</a>
</li>
<li>
<a href="#toc_9">    noop anticipatory [deadline] cfq</a>
</li>
<li>
<a href="#toc_10">禁用 Transparent Huge Pages (THP)</a>
</li>
<li>
<a href="#toc_11">修改磁盘预计参数 「预读扇区数」</a>
</li>
<li>
<a href="#toc_12">NTP 配置</a>
</li>
</ul>
</li>
<li>
<a href="#toc_13">第二部分 - 安装 Greenplum</a>
<ul>
<li>
<a href="#toc_14">更改权限</a>
</li>
<li>
<a href="#toc_15">配置 gp 机器host</a>
</li>
<li>
<a href="#toc_16">配置免密钥</a>
</li>
<li>
<a href="#toc_17"></a>
</li>
<li>
<a href="#toc_18">Greenplum 配置</a>
</li>
</ul>
</li>
<li>
<a href="#toc_19">第三部分 - 图形工具 GUI</a>
</li>
<li>
<a href="#toc_20">第四部分 -- Standby Master</a>
<ul>
<li>
<a href="#toc_21">添加 Standby Master</a>
</li>
<li>
<a href="#toc_22">删除 standby master</a>
</li>
<li>
<a href="#toc_23">重新同步 Standby Master「若已有 Standby Master，但这个节点已经不同步了，需要重启同步」</a>
</li>
<li>
<a href="#toc_24">查看 Standby Master 是否同步</a>
</li>
<li>
<a href="#toc_25">添加 Standby Master</a>
</li>
<li>
<a href="#toc_26">启用 Standby Master</a>
</li>
</ul>
</li>
</ul>


<span id="more"></span><!-- more -->

<p>架构：默认Grouped Miior，建议Spread Mirror</p>

<p>          172.24.3.76「Master」<br/>
     -------------------------<br/>
     |          |             |</p>

<pre><code>172.24.3.77  172.24.3.78     172.24.3.79
Primary 1    Primary 3       Primary 5
Primary 2    Primary 4       Primary 6
Mirror 5     Mirror 1        Mirror 3
Mirror 6     Mirror 2        Mirror 4

                             Master Standy
</code></pre>

<h1 id="toc_0">第一部分 - Linux Configuration 「所有节点」</h1>

<h2 id="toc_1">Add User 「所有节点执行」添加用户</h2>

<p>groupadd -g 530 gpadmin<br/>
useradd -g 530 -u 530 -m -d /home/gpadmin -s /bin/bash gpadmin<br/>
chown -R gpadmin.gpadmin /home/gpadmin<br/>
echo &quot;gpadmin&quot; | passwd --stdin gpadmin</p>

<h2 id="toc_2">关闭 SELinux 、 iptables</h2>

<p>cat /etc/selinux/config  | grep &quot;<sup>SELINUX=&quot;</sup></p>

<pre><code>SELINUX=disabled
</code></pre>

<p>sestatus  # 查看当前SeLinux配置是 disabled</p>

<p>/etc/init.d/iptables status</p>

<p>chkconfig --list | grep iptables | grep on</p>

<h2 id="toc_3">Yum 「防止初始化失败，ed 命令来修改配置文件」</h2>

<p>yum install ed -y</p>

<h2 id="toc_4">配置主机名 hosts</h2>

<p>vim /etc/hosts</p>

<pre><code>127.0.0.1   localhost localhost.localdomain localhost4  localhost4.localdomain4
::1         localhost localhost.localdomain localhost6  localhost6.localdomain6
172.24.3.76  dbaone
172.24.3.77  dbatwo
172.24.3.78  dbathree
172.24.3.79  dbafour
</code></pre>

<p>scp /etc/hosts dbaone:/etc<br/>
scp /etc/hosts dbatwo:/etc<br/>
scp /etc/hosts dbathree:/etc<br/>
scp /etc/hosts dbafour:/etc</p>

<h2 id="toc_5">配置内核参数</h2>

<p>vim /etc/sysctl.conf</p>

<pre><code>#xfs_mount_options = rw,noatime,inode64,allocsize=16m   # 因为使用不是xfs，所以注释此行kernel.shmmax = 500000000
kernel.shmmni = 4096
kernel.shmall = 4000000000
kernel.sem = 250 512000 100 2048
kernel.sysrq = 1
kernel.core_uses_pid = 1
kernel.msgmnb = 65536
kernel.msgmax = 65536
kernel.msgmni = 2048
net.ipv4.tcp_syncookies = 1
net.ipv4.ip_forward = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_max_syn_backlog = 4096
net.ipv4.conf.all.arp_filter = 1
net.ipv4.conf.defalut.arp_filter = 1
# add 20160331 ########
net.ipv4.ip_local_port_range = 1025 65535
net.core.netdev_max_backlog = 10000
net.core.rmem_max = 2097152
net.core.wmem_max = 2097152
#vm.overcommit_memory = 2     ### 测试环境要取消这个，否则oracle启不来 ### 值为1
</code></pre>

<p>sysctl -p</p>

<h2 id="toc_6">配置资源限制</h2>

<p>vim /etc/security/limits.conf</p>

<pre><code>soft nofile 65536* hard nofile 65536
soft nproc 131072
hard nproc 131072
</code></pre>

<p>vim /etc/security/limits.d/90-nproc.conf # 「将1024 修改为131072」</p>

<pre><code>soft nofile 65536
hard nofile 65536
soft nproc 131072
hard nproc 131072
</code></pre>

<h2 id="toc_7">XFS 分区</h2>

<p>yum install xfsprogs</p>

<p>mkfs.xfs -f /dev/[device]</p>

<p>vim /etc/fstab  # <em>后2位是 1 1 吗？</em></p>

<p>     /dev/[device] /[partition] xfs rw,noatime,inode64,allocsize=16m 0 0</p>

<h2 id="toc_8">设置Linux调度器规则，默认为 CFQ ，更改为 deadline</h2>

<p>cat /sys/block/{devname}/queue/scheduler<br/>
 </p>

<h2 id="toc_9">    noop anticipatory [deadline] cfq</h2>

<pre><code>echo deadline &gt; /sys/block/**{devname}**/queue/scheduler
</code></pre>

<blockquote>
<p>固化配置<br/>
cat /etc/rc.d/rc.local</p>
</blockquote>

<p>    echo deadline &gt; /sys/block/<strong>{devname</strong>/queue/scheduler</p>

<p>or </p>

<p>vim /boot/grub/menu.lst   # 配置错误会导致系统启动失败</p>

<pre><code># Note that you do not have to rerun grub after making changes to this file
# NOTICE:  You have a /boot partition.  This means that
#          all kernel and initrd paths are relative to /boot/, eg.
#          root (hd0,0)
#          kernel /vmlinuz-version ro root=/dev/mapper/VolGroup00-LogVol00
#          initrd /initrd-[generic-]version.img
#boot=/dev/vda
default=0
timeout=5

title CentOS (2.6.32-573.7.1.el6.x86_64)
</code></pre>

<p>        root (hd0,0)<br/>
        kernel /vmlinuz-2.6.32-573.7.1.el6.x86_64 ro root=/dev/mapper/VolGroup00-LogVol00 rd_NO_LUKS  KEYBOARDTYPE=pc KEYTABLE=uk LANG=en_US.UTF-8 rd_NO_MD  crashkernel=auto rd_LVM_LV=VolGroup00/LogVol01 rd_LVM_LV=VolGroup00/LogVol00 SYSFONT=latarcyrheb-sun16 rd_NO_DM  <strong> elevator=deadline</strong><br/>
        initrd /initramfs-2.6.32-573.7.1.el6.x86_64.img</p>

<h2 id="toc_10">禁用 Transparent Huge Pages (THP)</h2>

<p>cat /sys/kernel/mm/redhat_transparent_hugepage/defrag<br/>
     [always] madvise never</p>

<p>echo never &gt; /sys/kernel/mm/redhat_transparent_hugepage/defrag</p>

<p>     # 固化配置<br/>
    vim /etc/rc.d/rc.local<br/>
 <br/>
    if test -f /sys/kernel/mm/transparent_hugepage/enabled; then<br/>
     echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled<br/>
    fi</p>

<pre><code>if test -f /sys/kernel/mm/transparent_hugepage/defrag; then
</code></pre>

<p>     echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag<br/>
    fi</p>

<p>or</p>

<pre><code>vim /boot/grub/menu.lst   # 配置错误会导致系统启动失败

# Note that you do not have to rerun grub after making changes to this file
# NOTICE:  You have a /boot partition.  This means that
#          all kernel and initrd paths are relative to /boot/, eg.
#          root (hd0,0)
#          kernel /vmlinuz-version ro root=/dev/mapper/VolGroup00-LogVol00
#          initrd /initrd-[generic-]version.img
#boot=/dev/vda
default=0
timeout=5

title CentOS (2.6.32-573.7.1.el6.x86_64)
</code></pre>

<p>        root (hd0,0)<br/>
        kernel /vmlinuz-2.6.32-573.7.1.el6.x86_64 ro root=/dev/mapper/VolGroup00-LogVol00 rd_NO_LUKS  KEYBOARDTYPE=pc KEYTABLE=uk LANG=en_US.UTF-8 rd_NO_MD  crashkernel=auto rd_LVM_LV=VolGroup00/LogVol01 rd_LVM_LV=VolGroup00/LogVol00 SYSFONT=latarcyrheb-sun16 rd_NO_DM  <strong> elevator=deadline transparent_hugepage=never</strong><br/>
        initrd /initramfs-2.6.32-573.7.1.el6.x86_64.img</p>

<h2 id="toc_11">修改磁盘预计参数 「预读扇区数」</h2>

<p>/sbin/blockdev --getra /dev/[device]<br/>
     256</p>

<p>/sbin/blockdev --setra 16384 /dev/[device]</p>

<h2 id="toc_12">NTP 配置</h2>

<p>$ date<br/>
     Mon Apr 11 15:28:05 CST 2016</p>

<p>若显示不是CST，copy覆盖<br/>
cp /usr/share/zoneinfo/Asia/Chongqing /etc/local</p>

<p>vim /etc/ntp.conf</p>

<pre><code>server 172.24.2.10 prefer
server 172.24.2.11
</code></pre>

<p>/etc/init.d/ntpd status<br/>
     ntpd (pid  1666) is running...</p>

<h1 id="toc_13">第二部分 - 安装 Greenplum</h1>

<p>./greenplum-db-4.3.8.0-build-1-RHEL5-x86_64.bin</p>

<pre><code>********************************************************************************
Do you accept the Pivotal Database license agreement? [yes|no]
********************************************************************************

yes

********************************************************************************
Provide the installation path for Greenplum Database or press ENTER to
accept the default installation path: /usr/local/greenplum-db-4.3.8.0
********************************************************************************

/opt/greenplum/greenplum-db-4.3.8.0

********************************************************************************
Install Greenplum Database into &lt;/opt/greenplum/greenplum-db-4.3.8.0&gt;? [yes|no]
********************************************************************************

yes

********************************************************************************
/opt/greenplum/greenplum-db-4.3.8.0 does not exist.
Create /opt/greenplum/greenplum-db-4.3.8.0 ? [yes|no]
(Selecting no will exit the installer)
    ********************************************************************************

yes

Extracting product to /opt/greenplum/greenplum-db-4.3.8.0

********************************************************************************
Installation complete.
Greenplum Database is installed in /opt/greenplum/greenplum-db-4.3.8.0

Pivotal Greenplum documentation is available
for download at http://docs.gopivotal.com/gpdb
********************************************************************************
</code></pre>

<h2 id="toc_14">更改权限</h2>

<p>chown -R gpadmin.gpadmin /opt/greenplum/</p>

<p>chown -R gpadmin.gpadmin /opt/greenplum/greenplum-db</p>

<h2 id="toc_15">配置 gp 机器host</h2>

<p>su - gpadmin</p>

<p>mkdir -p /opt/greenplum/greenplum-db/conf</p>

<p>$ cat /opt/greenplum/greenplum-db/conf/hostlist<br/>
dbaone<br/>
dbatwo<br/>
dbathree<br/>
dbafour</p>

<p>$ cat /opt/greenplum/greenplum-db/conf/seg_hosts<br/>
dbatwo<br/>
dbathree<br/>
dbafour</p>

<h2 id="toc_16">配置免密钥</h2>

<blockquote>
<p>若ssh端口是22，使用此方法，否则手工配置免密钥</p>
</blockquote>

<p>$ gpssh-exkeys -f /opt/greenplum/greenplum-db/conf/hostlist</p>

<p>安装免密</p>

<p>[gpadmin@dbaone .ssh]$ gpssh-exkeys -f /opt/greenplum/greenplum-db/conf/hostlist<br/>
[STEP 1 of 5] create local ID and authorize on local host<br/>
  ... /home/gpadmin/.ssh/id_rsa file exists ... key generation skipped</p>

<p>[STEP 2 of 5] keyscan all hosts and update known_hosts file</p>

<p>[STEP 3 of 5] authorize current user on remote hosts<br/>
  ... send to sdw1<br/>
[ERROR sdw1] [Errno 111] Connection refused<br/>
[ERROR sdw1] skipping key exchange for sdw1<br/>
[ERROR sdw1] unable to authorize current user</p>

<p>[gpadmin@dbaone ~]$ gpssh -f /opt/greenplum/greenplum-db/conf/hostlist<br/>
Note: command history unsupported on this machine ...<br/>
=&gt;<br/>
=&gt; pwd<br/>
[ mdw] /home/gpadmin<br/>
[sdw1] /home/gpadmin<br/>
[sdw3] /home/gpadmin<br/>
[sdw2] /home/gpadmin</p>

<p>cd /opt/greenplum/<br/>
tar -czf gp.4.3.6.1.tar.gz greenplum-db-4.3.6.1/<br/>
chown gpadmin.gpadmin gp.4.3.6.1.tar.gz </p>

<p>source /opt/greenplum/greenplum-db/greenplum_path.sh</p>

<p>gpssh -f /opt/greenplum/greenplum-db/conf/seg_hosts -e -v  &quot;mkdir -p /opt/greenplum &amp;&amp; chown gpadmin.gpadmin -R /opt/greenplum&quot;</p>

<p>$ gpscp -f /opt/greenplum/greenplum-db/conf/seg_hosts /opt/greenplum/gp.4.3.6.1.tar.gz  =:/opt/greenplum/</p>

<p>$ gpssh -f /opt/greenplum/greenplum-db/conf/seg_hosts -e -v &quot;cd /opt/greenplum &amp;&amp; tar -zxf gp.4.3.6.1.tar.gz&quot;</p>

<blockquote>
<p>建立软链接「Master直接安装，自动创建链链接的，其他节点需要手工创建软链接，原Master节点软链接要删除下」</p>
</blockquote>

<p>$ gpssh -f /opt/greenplum/greenplum-db/conf/seg_hosts -e -v &quot;cd /opt/greenplum &amp;&amp; ln -s greenplum-db-4.3.8.0 greenplum-db&quot;</p>

<p>$ gpssh -f /opt/greenplum/greenplum-db/conf/<strong>hostlist</strong> -e &quot;cd /opt/greenplum &amp;&amp; ll&quot;</p>

<p>[gpadmin@dbaone ~]$ gpssh -f /opt/greenplum/greenplum-db/conf/hostlist -e &quot;cd /opt/greenplum &amp;&amp; ll&quot;<br/>
[  dbatwo] cd /opt/greenplum &amp;&amp; ll<br/>
[  dbatwo] total 140364<br/>
[  dbatwo] -rw-r--r--  1 gpadmin gpadmin 143726939 Apr 11 16:25 gp.4.3.8.0.tar.gz<br/>
[  dbatwo] lrwxrwxrwx  1 gpadmin gpadmin        20 Apr 11 16:30 greenplum-db -&gt; greenplum-db-4.3.8.0<br/>
[  dbatwo] drwxr-xr-x 12 gpadmin gpadmin      4096 Apr 11 15:55 greenplum-db-4.3.8.0<br/>
[ dbafour] cd /opt/greenplum &amp;&amp; ll<br/>
[ dbafour] total 140364<br/>
[ dbafour] -rw-r--r--  1 gpadmin gpadmin 143726939 Apr 11 16:25 gp.4.3.8.0.tar.gz<br/>
[ dbafour] lrwxrwxrwx  1 gpadmin gpadmin        20 Apr 11 16:30 greenplum-db -&gt; greenplum-db-4.3.8.0<br/>
[ dbafour] drwxr-xr-x 12 gpadmin gpadmin      4096 Apr 11 15:55 greenplum-db-4.3.8.0<br/>
[dbathree] cd /opt/greenplum &amp;&amp; ll<br/>
[dbathree] total 140364<br/>
[dbathree] -rw-r--r--  1 gpadmin gpadmin 143726939 Apr 11 16:25 gp.4.3.8.0.tar.gz<br/>
[dbathree] lrwxrwxrwx  1 gpadmin gpadmin        20 Apr 11 16:30 greenplum-db -&gt; greenplum-db-4.3.8.0<br/>
[dbathree] drwxr-xr-x 12 gpadmin gpadmin      4096 Apr 11 15:55 greenplum-db-4.3.8.0<br/>
[  dbaone] cd /opt/greenplum &amp;&amp; ll<br/>
[  dbaone] total 140364<br/>
[  dbaone] -rw-r--r--  1 gpadmin gpadmin 143726939 Apr 11 16:25 gp.4.3.8.0.tar.gz<br/>
[  dbaone] lrwxrwxrwx  1 gpadmin gpadmin        22 Apr 11 15:49 greenplum-db -&gt; ./greenplum-db-4.3.8.0<br/>
[  dbaone] drwxr-xr-x 12 gpadmin gpadmin      4096 Apr 11 15:55 greenplum-db-4.3.8.0</p>

<p>   &gt;  创建数据目录「gpmaster保存Master数据，每个机器gpdata1、gpdata2分别对应这个机器的两个主数据节点(Primary)，gpdatam1、gpdatam2对应备数据节点(Mirror)」</p>

<p>gpssh -f /opt/greenplum/greenplum-db/conf/<strong>hostlist</strong> -e -v &quot;mkdir -p /opt/greenplum/greenplum-db/gpdata/{gpmaster,gpdatap1,gpdatap2,gpdatam1,gpdatam2}&quot;</p>

<blockquote>
<p>配置环境变量</p>
</blockquote>

<p>$ gpssh -f /opt/greenplum/greenplum-db/conf/hostlist -e -v &quot;cat &gt;&gt; /home/gpadmin/.bash_profile &lt;&lt;EOF</p>

<p>source /opt/greenplum/greenplum-db/greenplum_path.sh<br/>
export MASTER_DATA_DIRECTORY=/opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1<br/>
export GPPORT=5432<br/>
export PGDATABASE=testDB<br/>
EOF&quot;</p>

<p>. .bash_profile</p>

<blockquote>
<p>系统参数校验：&quot;$PGHOME/etc/gpcheck.cnf&quot; </p>
</blockquote>

<p>gpcheck -f /opt/greenplum/greenplum-db/conf/hostlist</p>

<blockquote>
<p>网络测试</p>
</blockquote>

<p>gpcheckperf -d /tmp/ upload -r N -f /opt/greenplum/greenplum-db/conf/seg_hosts</p>

<p>or</p>

<p>gpcheckperf -d /tmp/ upload -r N -h dbathree -h dbafour  # &quot;单独测试2台机器网络&quot;</p>

<blockquote>
<p>文件系统测试</p>
</blockquote>

<p>gpcheckperf -f seg_hosts  -d /opt/greenplum/greenplum-db/gpdata/gpdatap1 -d /opt/greenplum/greenplum-db/gpdata/gpdatap2 -d /opt/greenplum/greenplum-db/gpdata/gpdatam1 -d /opt/greenplum/greenplum-db/gpdata/gpdatam2 -r ds</p>

<blockquote>
<p>初始化 Greenplum 配置文件<br/>
配置文件模板都在 /opt/greenplum/greenplum-db/docs/cli_help/gpconfigs<br/>
gpinitsystem_config 是初始化 Greenplum 的模板，此模板中 Mirror Segment的配置都被注释</p>
</blockquote>

<p>[gpadmin@dbaone ~]$ cd /opt/greenplum/greenplum-db/docs/cli_help/gpconfigs</p>

<p>$ cp gpinitsystem_config initgp_config</p>

<p>$ vim initgp_config</p>

<pre><code>ARRAY_NAME=&quot;EMC Greenplum DW&quot;
MACHINE_LIST_FILE=/opt/greenplum/greenplum-db/conf/seg_hosts
SEG_PREFIX=gpseg
PORT_BASE=40000
declare -a DATA_DIRECTORY=(/opt/greenplum/greenplum-db/gpdata/gpdatap1 /opt/greenplum/greenplum-db/gpdata/gpdatap2)
MASTER_HOSTNAME=dbaone
MASTER_DIRECTORY=/opt/greenplum/greenplum-db/gpdata/gpmaster
MASTER_PORT=5432
TRUSTED_SHELL=ssh
CHECK_POINT_SEGMENTS=8
ENCODING=UNICODE
MIRROR_PORT_BASE=50000
REPLICATION_PORT_BASE=41000
MIRROR_REPLICATION_PORT_BASE=51000
declare -a MIRROR_DATA_DIRECTORY=(/opt/greenplum/greenplum-db/gpdata/gpdatam1 /opt/greenplum/greenplum-db/gpdata/gpdatam2)
</code></pre>

<h2 id="toc_17"></h2>

<blockquote>
<p>初始化pg，-s 表示 standby master，若gp版本为3.8.0 不要在初始化加 standby master。</p>
</blockquote>

<p> &gt;备份方案有2种（Grouped Miior、Spread Mirror）,-S 表示使用Spread Mirror 分配 mirror节点，防止一个节点挂掉，另外一个节点集中成为瓶颈！  P301</p>

<p>[gpadmin@dbaone gpconfigs]$ gpinitsystem -c initgp_config -s dbafour -S</p>

<blockquote>
<p>$ gpinitsystem -c initgp_config -S</p>

<p>若初始化失败，需要删除数据目录重新来<br/>
gpssh -f /opt/greenplum/greenplum-db/conf/hostlist -e -v &quot;cd /opt/greenplum/greenplum-db/gpdata/ &amp;&amp; rm -rf gpmaster/* &amp;&amp; rm -rf gpdatap1/* &amp;&amp; rm -rf gpdatap2/* &amp;&amp; rm -rf gpdatam1/* &amp;&amp; rm -rf gpdatam2/* &quot;</p>
</blockquote>

<h2 id="toc_18">Greenplum 配置</h2>

<blockquote>
<p> 1&gt;、配置远程可登陆</p>
</blockquote>

<p>[gpadmin@dbaone ~]$ psql postgres<br/>
psql (8.2.15)<br/>
Type &quot;help&quot; for help.</p>

<p>testdb=# alter role gpadmin with password &#39;gpadmin&#39;;<br/>
ALTER ROLE</p>

<blockquote>
<p>为了保证与standby master 配置文件一致，standby master的配置文件也要修改！</p>
</blockquote>

<p>[gpadmin@dbaone ~]\( vim \)MASTER_DATA_DIRECTORY/pg_hba.conf</p>

<p>host    all     gpadmin         0.0.0.0/0 md5</p>

<p>[gpadmin@four ~]\( vim \)MASTER_DATA_DIRECTORY/pg_hba.conf</p>

<p>host    all     gpadmin         0.0.0.0/0 md5</p>

<blockquote>
<p>使配置生效！</p>
</blockquote>

<p>[gpadmin@dbaone ~]$ gpstop -u<br/>
20160405:10:59:06:023782 gpstop:dbaone:gpadmin-[INFO]:-Starting gpstop with args: -u<br/>
20160405:10:59:06:023782 gpstop:dbaone:gpadmin-[INFO]:-Gathering information and validating the environment...<br/>
20160405:10:59:06:023782 gpstop:dbaone:gpadmin-[INFO]:-Obtaining Greenplum Master catalog information<br/>
20160405:10:59:06:023782 gpstop:dbaone:gpadmin-[INFO]:-Obtaining Segment details from master...<br/>
20160405:10:59:07:023782 gpstop:dbaone:gpadmin-[INFO]:-Greenplum Version: &#39;postgres (Greenplum Database) 4.3.6.1 build 2&#39;<br/>
20160405:10:59:07:023782 gpstop:dbaone:gpadmin-[INFO]:-Signalling all postmaster processes to reload<br/>
.</p>

<p>C:\Users\Star&gt;psql -h 172.24.3.76 -p5432 -d postgres -U gpadmin<br/>
Password for user gpadmin:<br/>
psql (8.2.15)<br/>
Type &quot;help&quot; for help.</p>

<p>初始化后：登陆「」</p>

<p>[gpadmin@dbaone ~]$ psql -d postgres</p>

<blockquote>
<p>查看当前所有db</p>
</blockquote>

<p>postgres=# \l<br/>
                  List of databases<br/>
   Name    |  Owner  | Encoding |  Access privileges <br/>
-----------+---------+----------+---------------------<br/>
 postgres  | gpadmin | UTF8     |<br/>
 template0 | gpadmin | UTF8     | =c/gpadmin         <br/>
                                : gpadmin=CTc/gpadmin<br/>
 template1 | gpadmin | UTF8     | =c/gpadmin         <br/>
                                : gpadmin=CTc/gpadmin<br/>
(3 rows)</p>

<blockquote>
<p>创建表，并查看当前db下所有table</p>
</blockquote>

<p>testdb=# create table t1(id int primary key ,name varchar(128));<br/>
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index &quot;t1_pkey&quot; for table &quot;t1&quot;<br/>
CREATE TABLE<br/>
testdb=#<br/>
testdb=# \d<br/>
             List of relations<br/>
 Schema | Name | Type  |  Owner  | Storage<br/>
--------+------+-------+---------+---------<br/>
 public | t1   | table | gpadmin | heap<br/>
(1 row)</p>

<blockquote>
<p>启动与关闭数据库「-a 不会手动输入yes了」</p>
</blockquote>

<p>$ gpstart -a</p>

<p>$ gpstop -a</p>

<blockquote>
<p>reload 配置文件</p>
</blockquote>

<p>$ gpstop -u</p>

<blockquote>
<p>查看状态</p>
</blockquote>

<p>gpstat -e #查看mirror的状态<br/>
gpstat -f #查看standby master的状态<br/>
gpstat -s #查看整个GP群集的状态<br/>
gpstat -i #查看GP的版本<br/>
gpstat --help #帮助文档，可以查看gpstat更多用法</p>

<h1 id="toc_19">第三部分 - 图形工具 GUI</h1>

<p>     Navicat Premium<br/>
     <br/>
     pgAdmin</p>

<p>          <a href="http://www.pgadmin.org/download/?lang=zh_CN">http://www.pgadmin.org/download/?lang=zh_CN</a></p>

<p>          <a href="http://www.postgresql.org/ftp/pgadmin3/release/">http://www.postgresql.org/ftp/pgadmin3/release/</a></p>

<blockquote>
<p>保存密码<br/>
警 告： 你 已 经 选 择 了 保 存 密 码， 在 *nix 下 它 将 被 保 存 在 home 目 录 的 纯 文 本 文 件 中， 而 在 Windows 系 统 下 它 将 被 保 存 在 用 户 的 配 置 文 件 中。 如 果 你 不 想 这 么 做， 请 点 击 Cancel 按 钮。 <br/>
pgAdmin 使 用 PostgreSQL 的 &#39;pgpass&#39; 机 制 保 存 密 码。 在 *nix 系 统 下， 密 码 将 被 保 存 在 ~/.pgpass 文 件 中； 而 在 Windows 系 统 下， 它 将 被 保 存 在 %APPDATA%\PostgreSQL\pgpass.conf 文 件 中 （%APPDATA% 是 位 于 用 户 配 置 文 件 之 内 的 &#39;Application Data&#39; 文 件 夹）。 这 个 机 制 被 用 来 作 为 使 用 libpg 库 连 接 数 据 库 服 务 器 的 所 有 程 序 的 缺 省 机 制， 包 括 命 令 行 程 序（例 如 pg_dump 和 pg_restore）、 其 他 GUI 程 序、 驱 动 程 序 （例 如 ： psqlODBC）。 这 意 味 着 这 些 程 序 都 可 以 使 用 这 个 保 存 的 密 码 自 动 连 接 到 数 据 库， 如 果 你 不 想 这 样 做， 不 要 使 用 pgAdmin 的 Store Password 的 选 项。</p>
</blockquote>

<h1 id="toc_20">第四部分 -- Standby Master</h1>

<h2 id="toc_21">添加 Standby Master</h2>

<p>参考：<a href="https://app.yinxiang.com/shard/s6/nl/387421/c576c73f-e417-40e5-8a9a-90bf229d3380">greenplum数据库master节点搭建standby</a></p>

<h2 id="toc_22">删除 standby master</h2>

<p>     gpinitstandby -r</p>

<h2 id="toc_23">重新同步 Standby Master「若已有 Standby Master，但这个节点已经不同步了，需要重启同步」</h2>

<p>     gpinitstandby -n</p>

<h2 id="toc_24">查看 Standby Master 是否同步</h2>

<blockquote>
<p>GP 4.1<br/>
testdb=# select * from gp_master_mirroring;</p>

<p>GP 4.3<br/>
testdb=# select procpid,state from pg_stat_replication;<br/>
 procpid |   state   <br/>
---------+-----------<br/>
    1806 | streaming<br/>
(1 row)</p>
</blockquote>

<h2 id="toc_25">添加 Standby Master</h2>

<p>[gpadmin@dbaone ~]$ gpinitstandby -s dbafour</p>

<blockquote>
<p>20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Validating environment and parameters for standby initialization...<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Checking for filespace directory /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1 on dbafour<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:------------------------------------------------------<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Greenplum standby master initialization parameters<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:------------------------------------------------------<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Greenplum master hostname               = dbaone<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Greenplum master data directory         = /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Greenplum master port                   = 5432<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Greenplum standby master hostname       = dbafour<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Greenplum standby master port           = 5432<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Greenplum standby master data directory = /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Greenplum update system catalog         = On<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:------------------------------------------------------<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:- Filespace locations<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:------------------------------------------------------<br/>
20160408:10:47:23:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-pg_system -&gt; /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1<br/>
Do you want to continue with standby master initialization? Yy|Nn (default=N):<br/>
y<br/>
20160408:10:47:59:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Syncing Greenplum Database extensions to standby<br/>
20160408:10:47:59:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-The packages on dbafour are consistent.<br/>
20160408:10:47:59:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Adding standby master to catalog...<br/>
20160408:10:47:59:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Database catalog updated successfully.<br/>
20160408:10:47:59:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Updating pg_hba.conf file...<br/>
20160408:10:48:05:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-pg_hba.conf files updated successfully.<br/>
20160408:10:48:07:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Updating filespace flat files...<br/>
20160408:10:48:07:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Filespace flat file updated successfully.<br/>
20160408:10:48:08:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Starting standby master<br/>
20160408:10:48:08:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Checking if standby master is running on host: dbafour  in directory: /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1<br/>
20160408:10:48:10:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Cleaning up pg_hba.conf backup files...<br/>
20160408:10:48:15:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Backup files of pg_hba.conf cleaned up successfully.<br/>
20160408:10:48:15:001705 gpinitstandby:dbaone:gpadmin-[INFO]:-Successfully created standby master on dbafour</p>
</blockquote>

<p>testdb=# select * from gp_segment_configuration order by 1;<br/>
 dbid | content | role | preferred_role | mode | status | port  | hostname | address  | replication_port | san_mounts<br/>
------+---------+------+----------------+------+--------+-------+----------+----------+------------------+------------<br/>
    1 |      -1 | p    | p              | s    | u      |  5432 | dbaone   | dbaone   |                  |<br/>
    2 |       0 | p    | p              | s    | u      | 40000 | dbafour  | dbafour  |            41000 |<br/>
    3 |       1 | p    | p              | s    | u      | 40001 | dbafour  | dbafour  |            41001 |<br/>
    4 |       2 | p    | p              | s    | u      | 40000 | dbathree | dbathree |            41000 |<br/>
    5 |       3 | p    | p              | s    | u      | 40001 | dbathree | dbathree |            41001 |<br/>
    6 |       4 | p    | p              | s    | u      | 40000 | dbatwo   | dbatwo   |            41000 |<br/>
    7 |       5 | p    | p              | s    | u      | 40001 | dbatwo   | dbatwo   |            41001 |<br/>
    8 |       0 | m    | m              | s    | u      | 50000 | dbathree | dbathree |            51000 |<br/>
    9 |       1 | m    | m              | s    | u      | 50001 | dbathree | dbathree |            51001 |<br/>
   10 |       2 | m    | m              | s    | u      | 50000 | dbatwo   | dbatwo   |            51000 |<br/>
   11 |       3 | m    | m              | s    | u      | 50001 | dbatwo   | dbatwo   |            51001 |<br/>
   12 |       4 | m    | m              | s    | u      | 50000 | dbafour  | dbafour  |            51000 |<br/>
   13 |       5 | m    | m              | s    | u      | 50001 | dbafour  | dbafour  |            51001 |<br/>
   14 |      -1 | m    | m              | s    | u      |  5432 | dbafour  | dbafour  |                  |<br/>
(14 rows)</p>

<p>[root@dbafour ~]# ps aux | grep green | grep -v grep<br/>
gpadmin   7423  3.0  2.5 428824 204492 ?       Ss   10:48   0:00 /opt/greenplum/greenplum-db-4.3.6.1/bin/postgres -D /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1 -p 5432 -b 14 -z 6 --silent-mode=true -i -M master -C -1 -x 0 -y -E<br/>
gpadmin   8283  0.0  2.8 469228 227376 ?       Ss   Apr01   0:01 /opt/greenplum/greenplum-db-4.3.6.1/bin/postgres -D /opt/greenplum/greenplum-db/gpdata/gpdatam2/gpseg5 -p 50001 -b 13 -z 6 --silent-mode=true -i -M quiescent -C 5<br/>
gpadmin   8284  0.0  2.8 471332 229840 ?       Ss   Apr01   0:09 /opt/greenplum/greenplum-db-4.3.6.1/bin/postgres -D /opt/greenplum/greenplum-db/gpdata/gpdatap2/gpseg1 -p 40001 -b 3 -z 6 --silent-mode=true -i -M quiescent -C 1<br/>
gpadmin   8285  0.0  2.8 471336 227812 ?       Ss   Apr01   0:09 /opt/greenplum/greenplum-db-4.3.6.1/bin/postgres -D /opt/greenplum/greenplum-db/gpdata/gpdatap1/gpseg0 -p 40000 -b 2 -z 6 --silent-mode=true -i -M quiescent -C 0<br/>
gpadmin   8286  0.0  2.8 469232 229420 ?       Ss   Apr01   0:01 /opt/greenplum/greenplum-db-4.3.6.1/bin/postgres -D /opt/greenplum/greenplum-db/gpdata/gpdatam1/gpseg4 -p 50000 -b 12 -z 6 --silent-mode=true -i -M quiescent -C 4</p>

<p>[gpadmin@dbaone ~]$ gpstate -f</p>

<blockquote>
<p>20160408:11:36:43:002727 gpstate:dbaone:gpadmin-[INFO]:-Starting gpstate with args: -f<br/>
20160408:11:36:43:002727 gpstate:dbaone:gpadmin-[INFO]:-local Greenplum Version: &#39;postgres (Greenplum Database) 4.3.6.1 build 2&#39;<br/>
20160408:11:36:43:002727 gpstate:dbaone:gpadmin-[INFO]:-master Greenplum Version: &#39;PostgreSQL 8.2.15 (Greenplum Database 4.3.6.1 build 2) on x86_64-unknown-linux-gnu, compiled by GCC gcc (GCC) 4.4.2 compiled on Oct  1 2015 15:14:22&#39;<br/>
20160408:11:36:43:002727 gpstate:dbaone:gpadmin-[INFO]:-Obtaining Segment details from master...<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:-Standby master details<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:-----------------------<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:-   Standby address          = dbafour<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:-   Standby data directory   = /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:-   Standby port             = 5432<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:-   Standby PID              = 7423<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:-   Standby status           = Standby host passive<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:--------------------------------------------------------------<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:--pg_stat_replication<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:--------------------------------------------------------------<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:--WAL Sender State: streaming<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:--Sync state: sync<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:--Sent Location: 0/C0000C0<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:--Flush Location: 0/C0000C0<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:--Replay Location: 0/C0000C0<br/>
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:--------------------------------------------------------------</p>
</blockquote>

<p>[gpadmin@dbaone ~]$ gpstate -s</p>

<blockquote>
<p>20160408:10:48:52:001833 gpstate:dbaone:gpadmin-[INFO]:-Starting gpstate with args: -s<br/>
20160408:10:48:52:001833 gpstate:dbaone:gpadmin-[INFO]:-local Greenplum Version: &#39;postgres (Greenplum Database) 4.3.6.1 build 2&#39;<br/>
20160408:10:48:52:001833 gpstate:dbaone:gpadmin-[INFO]:-master Greenplum Version: &#39;PostgreSQL 8.2.15 (Greenplum Database 4.3.6.1 build 2) on x86_64-unknown-linux-gnu, compiled by GCC gcc (GCC) 4.4.2 compiled on Oct  1 2015 15:14:22&#39;<br/>
20160408:10:48:52:001833 gpstate:dbaone:gpadmin-[INFO]:-Obtaining Segment details from master...<br/>
20160408:10:48:52:001833 gpstate:dbaone:gpadmin-[INFO]:-Gathering data from segments...<br/>
.<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:--Master Configuration &amp; Status<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Master host                    = dbaone<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Master postgres process ID     = 26859<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Master data directory          = /opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Master port                    = 5432<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Master current role            = dispatch<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Greenplum initsystem version   = 4.3.6.1 build 2<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Greenplum current version      = PostgreSQL 8.2.15 (Greenplum Database 4.3.6.1 build 2) on x86_64-unknown-linux-gnu, compiled by GCC gcc (GCC) 4.4.2 compiled on Oct  1 2015 15:14:22<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Postgres version               = 8.2.15<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Master standby                 = dbafour<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Standby master state           = Standby host passive<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-Segment Instance Status Report<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Segment Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Hostname                          = dbafour<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Address                           = dbafour<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Datadir                           = /opt/greenplum/greenplum-db/gpdata/gpdatap1/gpseg0<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Port                              = 40000<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Mirroring Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Current role                      = Primary<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Preferred role                    = Primary<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Mirror status                     = Synchronized<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Status<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      PID                               = 8285<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Configuration reports status as   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Database status                   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Segment Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Hostname                          = dbathree<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Address                           = dbathree<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Datadir                           = /opt/greenplum/greenplum-db/gpdata/gpdatam1/gpseg0<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Port                              = 50000<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Mirroring Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Current role                      = Mirror<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Preferred role                    = Mirror<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Mirror status                     = Synchronized<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Status<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      PID                               = 17476<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Configuration reports status as   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Segment status                    = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Segment Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Hostname                          = dbafour<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Address                           = dbafour<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Datadir                           = /opt/greenplum/greenplum-db/gpdata/gpdatap2/gpseg1<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Port                              = 40001<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Mirroring Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Current role                      = Primary<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Preferred role                    = Primary<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Mirror status                     = Synchronized<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Status<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      PID                               = 8284<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Configuration reports status as   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Database status                   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Segment Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Hostname                          = dbathree<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Address                           = dbathree<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Datadir                           = /opt/greenplum/greenplum-db/gpdata/gpdatam2/gpseg1<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Port                              = 50001<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Mirroring Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Current role                      = Mirror<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Preferred role                    = Mirror<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Mirror status                     = Synchronized<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Status<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      PID                               = 17475<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Configuration reports status as   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Segment status                    = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Segment Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Hostname                          = dbathree<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Address                           = dbathree<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Datadir                           = /opt/greenplum/greenplum-db/gpdata/gpdatap1/gpseg2<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Port                              = 40000<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Mirroring Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Current role                      = Primary<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Preferred role                    = Primary<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Mirror status                     = Synchronized<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Status<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      PID                               = 17474<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Configuration reports status as   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Database status                   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Segment Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Hostname                          = dbatwo<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Address                           = dbatwo<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Datadir                           = /opt/greenplum/greenplum-db/gpdata/gpdatam1/gpseg2<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Port                              = 50000<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Mirroring Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Current role                      = Mirror<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Preferred role                    = Mirror<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Mirror status                     = Synchronized<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Status<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      PID                               = 19407<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Configuration reports status as   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Segment status                    = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Segment Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Hostname                          = dbathree<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Address                           = dbathree<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Datadir                           = /opt/greenplum/greenplum-db/gpdata/gpdatap2/gpseg3<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Port                              = 40001<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Mirroring Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Current role                      = Primary<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Preferred role                    = Primary<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Mirror status                     = Synchronized<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Status<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      PID                               = 17473<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Configuration reports status as   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Database status                   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Segment Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Hostname                          = dbatwo<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Address                           = dbatwo<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Datadir                           = /opt/greenplum/greenplum-db/gpdata/gpdatam2/gpseg3<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Port                              = 50001<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Mirroring Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Current role                      = Mirror<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Preferred role                    = Mirror<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Mirror status                     = Synchronized<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Status<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      PID                               = 19406<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Configuration reports status as   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Segment status                    = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Segment Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Hostname                          = dbatwo<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Address                           = dbatwo<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Datadir                           = /opt/greenplum/greenplum-db/gpdata/gpdatap1/gpseg4<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Port                              = 40000<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Mirroring Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Current role                      = Primary<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Preferred role                    = Primary<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Mirror status                     = Synchronized<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Status<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      PID                               = 19408<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Configuration reports status as   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Database status                   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Segment Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Hostname                          = dbafour<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Address                           = dbafour<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Datadir                           = /opt/greenplum/greenplum-db/gpdata/gpdatam1/gpseg4<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Port                              = 50000<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Mirroring Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Current role                      = Mirror<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Preferred role                    = Mirror<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Mirror status                     = Synchronized<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Status<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      PID                               = 8286<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Configuration reports status as   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Segment status                    = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Segment Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Hostname                          = dbatwo<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Address                           = dbatwo<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Datadir                           = /opt/greenplum/greenplum-db/gpdata/gpdatap2/gpseg5<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Port                              = 40001<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Mirroring Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Current role                      = Primary<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Preferred role                    = Primary<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Mirror status                     = Synchronized<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Status<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      PID                               = 19405<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Configuration reports status as   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Database status                   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-----------------------------------------------------<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Segment Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Hostname                          = dbafour<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Address                           = dbafour<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Datadir                           = /opt/greenplum/greenplum-db/gpdata/gpdatam2/gpseg5<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Port                              = 50001<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Mirroring Info<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Current role                      = Mirror<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Preferred role                    = Mirror<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Mirror status                     = Synchronized<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-   Status<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      PID                               = 8283<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Configuration reports status as   = Up<br/>
20160408:10:48:53:001833 gpstate:dbaone:gpadmin-[INFO]:-      Segment status                    = Up</p>
</blockquote>

<h2 id="toc_26">启用 Standby Master</h2>

<blockquote>
<p>确认 Standby Master 是同步的</p>
</blockquote>

<p>gpstate -f </p>

<pre><code>20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:--WAL Sender State: streaming
20160408:11:36:44:002727 gpstate:dbaone:gpadmin-[INFO]:--Sync state: sync
</code></pre>

<blockquote>
<p>关闭原 Master</p>
</blockquote>

<p>gpstop -m</p>

<blockquote>
<p>在 Standby Master 上激活</p>
</blockquote>

<p>vim .bash_profile</p>

<pre><code>source /opt/greenplum/greenplum-db/greenplum_path.sh
export MASTER_DATA_DIRECTORY=/opt/greenplum/greenplum-db/gpdata/gpmaster/gpseg-1
export GPPORT=5432
export PGDATABASE=testdb
</code></pre>

<p>. .bash_profile</p>

<p>gpactivatestandby -d $MASTER_DATA_DIRECTORY </p>

<blockquote>
<p>对整个数据库进行 ANALYZE ，收集统计信息</p>
</blockquote>

<p>psql -d testdb -c &quot;ANALYZE&quot;</p>

<blockquote>
<p>所有客户端的IP，连接到 Standby Master</p>

<p>切换原有的 Master，使用gpinitstandby</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Group Replication]]></title>
    <link href="https://saup007.github.io/15000823671749.html"/>
    <updated>2017-07-15T09:32:47+08:00</updated>
    <id>https://saup007.github.io/15000823671749.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">关于 Group Greplication</a>
<ul>
<li>
<a href="#toc_1">异步复制</a>
</li>
<li>
<a href="#toc_2">半同步复制</a>
</li>
<li>
<a href="#toc_3">Group Replication</a>
<ul>
<li>
<a href="#toc_4">Group Replication 要求</a>
</li>
<li>
<a href="#toc_5">Group Replication 限制</a>
</li>
<li>
<a href="#toc_6">常见问题</a>
</li>
</ul>
</li>
<li>
<a href="#toc_7">单独的通信机制</a>
<ul>
<li>
<a href="#toc_8">Binlog Event 多线程执行</a>
<ul>
<li>
<a href="#toc_9">基于主键的并行执行</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_10">Paxos 协议优点</a>
</li>
</ul>
</li>
<li>
<a href="#toc_11">服务模式</a>
<ul>
<li>
<a href="#toc_12">单主模式</a>
<ul>
<li>
<a href="#toc_13">自动选举 &amp;&amp; Failover</a>
</li>
<li>
<a href="#toc_14">读写自动切换</a>
</li>
<li>
<a href="#toc_15">缺点</a>
</li>
</ul>
</li>
<li>
<a href="#toc_16">多主模式</a>
<ul>
<li>
<a href="#toc_17">自增字段</a>
</li>
<li>
<a href="#toc_18">优点</a>
</li>
<li>
<a href="#toc_19">缺点</a>
</li>
<li>
<a href="#toc_20">多主模式思考</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_21">配置 Group Replication</a>
<ul>
<li>
<a href="#toc_22">必要配置</a>
<ul>
<li>
<ul>
<li>
<a href="#toc_23">复制用户</a>
</li>
<li>
<a href="#toc_24">my.cnf 配置</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_25">加载 Group Replication 插件</a>
<ul>
<li>
<a href="#toc_26">安装插件</a>
</li>
<li>
<a href="#toc_27">初始化组</a>
</li>
<li>
<a href="#toc_28">新成员加入</a>
</li>
</ul>
</li>
<li>
<a href="#toc_29">Group Replication 网络分区</a>
<ul>
<li>
<a href="#toc_30">检测分区</a>
</li>
<li>
<a href="#toc_31">解除分隔</a>
</li>
</ul>
</li>
<li>
<a href="#toc_32">多主模式 (wait)</a>
</li>
</ul>
</li>
<li>
<a href="#toc_33">问题处理</a>
<ul>
<li>
<a href="#toc_34">1. 网络中断/分区处理</a>
</li>
<li>
<a href="#toc_35">2. 组成员事务不一致</a>
</li>
<li>
<a href="#toc_36">3. 大事务导致组成员被移除或切换</a>
</li>
</ul>
</li>
<li>
<a href="#toc_37">自动化兼容</a>
<ul>
<li>
<a href="#toc_38">监控</a>
</li>
<li>
<a href="#toc_39">备份</a>
</li>
<li>
<a href="#toc_40">扩容</a>
</li>
</ul>
</li>
</ul>


<span id="more"></span><!-- more -->

<h2 id="toc_0">关于 Group Greplication</h2>

<ul>
<li>异步复制</li>
<li>半同步复制</li>
<li>Group Replication</li>
</ul>

<p>Group Replication 是组复制，不是同步复制，但最终是同步的，更确切地说，事务以相同顺序传递给所有组成员，但它们执行并不同步，接受事务被提交之后，每个成员以自己的速度提交。</p>

<h3 id="toc_1">异步复制</h3>

<p><img src="https://dev.mysql.com/doc/refman/5.7/en/images/async-replication-diagram.png" style="zoom:50%" /></p>

<h3 id="toc_2">半同步复制</h3>

<p><img src="https://dev.mysql.com/doc/refman/5.7/en/images/semisync-replication-diagram.png" style="zoom:50%" /></p>

<h3 id="toc_3">Group Replication</h3>

<p><img src="https://dev.mysql.com/doc/refman/5.7/en/images/gr-replication-diagram.png" style="zoom:50%" /></p>

<blockquote>
<p>此图没有包含 Paxos 消息等信息</p>
</blockquote>

<h4 id="toc_4">Group Replication 要求</h4>

<ul>
<li>InnoDB</li>
<li>Primary Key</li>
<li>IPv4，不支持 IPv6</li>
<li>Network Performance</li>
<li>log_bin = binlog</li>
<li>log_slave_update = ON</li>
<li>binlog_format = ROW</li>
<li>GTID</li>
<li>master_info_repository = TABLE、relay_log_info_repository = TABLE</li>
<li>transaction_write_set_extraction = XXHASH64</li>
<li>Multi-threaded Appliers (slave_parallel_type、slave_parallel_workers、slave_preserve_commit_order)</li>
<li>当前环境要存在 root@localhost 用户，INSTALL PLUGIN 时要使用 root@localhost 创建和检查 <u>gr</u>user@localhost</li>
</ul>

<h4 id="toc_5">Group Replication 限制</h4>

<ul>
<li>binlog_checksum = NONE </li>
<li>Gap Locks : 认证过程(The certification process)不考虑 Gap locks，因为Gap locks信息在InnoDB外不可用，详细参考 <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html#innodb-gap-locks">Gap Locks</a>

<ul>
<li>除非应用程序依赖 REPEATABLE READ，否则建议 READ COMMITTED，因为 InnoDB 在 READ COMMITTED 没有 Gap locks，InnoDB本身冲突检测和Group Replication 分布式冲突检测协同工作</li>
</ul></li>
<li>Table Locks and Named Locks : 认证过程(The certification process)不考虑表锁 [ <a href="https://dev.mysql.com/doc/refman/5.7/en/lock-tables.html">Section 13.3.5, “LOCK TABLES and UNLOCK TABLES Syntax</a> 和命名锁 <a href="https://dev.mysql.com/doc/refman/5.7/en/miscellaneous-functions.html#function_get-lock">GET_LOCK()</a></li>
<li><del>Savepoints Not Supported</del> (5.7.19 已经支持)</li>
<li>SERIALIZABLE Isolation Level 多主模式不支持</li>
<li>Concurrent DDL versus DML Operations(并发DDL与DML操作) : 多主模式下，同一对象在不同成员并发执行DDL和DML语句，可能造成脑裂数据不一致</li>
<li>级联约束外键 多主模式不支持，外键约束可能导致多主模式组成的级联操作造成检测不到的冲突，导致组内成员数据不一致。单主模式不受影响。

<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/group-replication-options.html#sysvar_group_replication_enforce_update_everywhere_checks"><code>group_replication_enforce_update_everywhere_checks=ON</code></a> </li>
</ul></li>
<li>Very Large Transactions : 产生足够大的GTID内容的个别事务可能导致组通信中的故障，该GTID内容足够大，无法通过网络在组合成员之间复制5秒钟以内。为避免此问题，尽可能多地尝试限制交易的大小。例如，将使用LOAD DATA INFILE的文件拆分成更小的块。</li>
</ul>

<h4 id="toc_6">常见问题</h4>

<ol>
<li><p>一个 MySQL Group Replication 最大成员数是多少？</p>

<p>9个</p></li>
<li><p>MySQL Group Replication 组内成员怎么通信？</p>

<p>通过 P2P TCP 连接，参数 group_replication_local_address 设置，IP要求所有成员可访问，仅用于组内成员内部通信和消息传递</p></li>
<li><p>group_replication_bootstrap_group 参数有什么用？</p>

<p>MySQL Gropu Replication 创建组并做为初始化种子，第二个加入的成员需要向引导成员请求动态更改配置，以便加入到组中。</p>

<p>二种情况下使用：</p>

<ul>
<li>创建初始化 Group Replication时</li>
<li>关闭并重新启动整个组时</li>
</ul></li>
<li><p>如果配置恢复过程？</p>

<p>可以通过  CHANGE MASTER TO 语句预配置组恢复通道</p></li>
<li><p>可以通过组复制横向扩展写负载？</p>

<p>可以通过组内不同成员之间传播<u><strong>无冲突</strong></u>的事务来横向扩展写。</p></li>
<li><p>相同工作负载，对比简单复制，需要更多的CPU和宽带？</p>

<p>组内各个成员要不断交互，成员数更多对成员数少要求更多的宽带(9&gt;3)，为了保证组内同步和消息传递，会占用更多CPU和内存</p></li>
<li><p>可以跨广域网部署吗？</p>

<p>可以，但是每个成员之间网络必须可靠，为了高性能需要低延时、高宽带，如网络丢包导致重传和更高端到端延时，吞吐量和延时都会受影响</p>

<p>在延时大、带宽窄的网络环境，提高 Paxos对网络适应，做了压缩和多个本地事务封装一个数据包的优化  <a href="https://dev.mysql.com/doc/refman/5.7/en/group-replication-message-compression.html">Section 17.9.7.2, “Message Compression”</a></p>

<blockquote>
<p>当组内成员通信往返时间 (RTT) 为2秒或更长时，可能会遇到问题，因为内置故障检测机制可能会错误的触发</p>
</blockquote></li>
<li><p>当出现临时连接问题时，成员能自动重新加入组吗？</p>

<p>取决连接问题：</p>

<ul>
<li>连接问题暂时的，恢复足够快，故障检测还没检测到就进行了重新连接，则不会移除</li>
<li>如果长时间连接问题，故障检测器最终检测到问题，该成员被移除，当恢复后，需要手工加入(或脚本自动加入)</li>
</ul></li>
<li><p>什么时候从组内移除成员？</p>

<p>当某个成员无响应时(崩溃或网络问题)，系统会检测到故障，其他成员把它从组配置中移除，创建一个不包含该成员的新配置</p></li>
<li><p>当一个成员明显的延时怎么处理？</p>

<p>当一个成员明显延时，没有定义何时从组中自动移除成员的策略，<u><strong>要找到延时原因并修复它或从组中删除该成员</strong></u>，否则触发&quot;流量控制&quot;，那么整个组的也将变慢。(流量控制可配置)</p></li>
<li><p>在怀疑组中存在问题时，组中是否有某个特定成员负责触发重新配置组？</p>

<p>没有。</p>

<p>任何成员都可以怀疑组中存在问题，所有成员需要(自动)对&quot;某个成员故障&quot;达成一致的意见，有一个成员负责触发重新配置，从组中将故障成员移除，具体哪个成员不可配置。</p></li>
<li><p>Can I use Group Replication for sharding?</p></li>
<li><p>How do I use Group Replication with SELinux?</p></li>
<li><p>How do I use Group Replication with iptables?</p></li>
<li><p>How do I recover the relay log for a replication channel used by a group member?</p></li>
</ol>

<h3 id="toc_7">单独的通信机制</h3>

<p>GR 使用 Slave 的通道，只是使用通过执行线程(Applier Thread)来执行 Binlog Event，并没有使用通道传输 Binlog Event。</p>

<p>没有使用异步复制的 Binlog Event，也没有使用 MySQL 服务端口通信，而是创建一个独立 TCP 端口通信，各个 MySQL 服务器睥 Group Replication 插件通过这个端口连接在一起，两两通信</p>

<h4 id="toc_8">Binlog Event 多线程执行</h4>

<p>GR 插件自动创建一个通道 group_replication_applier (channel) 来执行接收到的 Binlog Event，当加入组时，GR 插件自动启动 group_replication_applier 通道的执行线程(Applier Thread)</p>

<pre><code class="language-sql">-- 手工调整这个通道执行线程
START SLAVE SQL_THREAD FOR CHANNEL &#39;group_replication_applier&#39;;
STOP SLAVE SQL_THREAD FOR CHANNEL &#39;group_replication_applier&#39;;
</code></pre>

<h5 id="toc_9">基于主键的并行执行</h5>

<pre><code class="language-sql">SET GLOBAL slave_parallel_type = &#39;LOGICAL_CLOCK&#39;;
SET GLOBAL slave_parallel_workers = N;
SET GLOBAL slave_preserve_commit_order = ON;
</code></pre>

<blockquote>
<p>GR 的 LOGCAL_CLOCK 与异步复制的算法不同，GR 并发策略的逻辑时间是基于主键计算出来的，比异步复制基于锁计算出来的逻辑时间的并发性要好很多</p>
</blockquote>

<p>基于主键并行复制特点</p>

<ul>
<li>若两个事务更新同一行，则要按顺序执行，否则就可以并发</li>
<li>DDL 不能和任务事务并发，必须等待它前面所有事务执行完才能开始执行，后面的事务也要必须等等 DDL 执行完才能执行</li>
</ul>

<p>为什么配置 slave_preserve_commit_order</p>

<blockquote>
<p>并发执行时，不管两个事务 Binlog Event 是不是同一 session 产生，只要满足上面的特点就会并发，因此同一 session 里的事务可能被安排并发执行，会导致后执行的事务先被提交的情况，为了保证同一个 session 的事务按照顺序提交，必须配置此参数，保证 Applier 上执行事务的提交顺序和 源 MySQL 一致</p>
</blockquote>

<h3 id="toc_10">Paxos 协议优点</h3>

<ul>
<li>不会脑裂 [有疑问，原主从环境有脑裂 P363] ???</li>
<li>冗余好，保证 Binlog 至少被复制超过一半成员，只要同时宕机成员不超过一半不会导致数据丢失</li>
<li>保证只要 Binlog Event 没有被传输到半数以上成员，本地成员不会将事务的 Binlog Event 写入 Binlog 文件和提交事务，从而保证宕机的服务器不会有组内在线不存在的数据，宕机的服务器重启后，不再需要特殊处理就可以加入组</li>
</ul>

<h2 id="toc_11">服务模式</h2>

<ul>
<li>单主模式 (默认模式)</li>
<li>多主模式</li>
</ul>

<pre><code>-- 设置多主模式
SET GLOBAL group_replication_single_primary_mode = OFF;
</code></pre>

<blockquote>
<p>如果使用多主模式，需要加入组之前将此变量置为 OFF，服务模式不能在线切换，必须组内所有成员退出组，然后重新初始化要使用的模式，再把其他成员加进来</p>
</blockquote>

<h3 id="toc_12">单主模式</h3>

<ul>
<li>Primary Member</li>
<li>Secondary Member</li>
</ul>

<h4 id="toc_13">自动选举 &amp;&amp; Failover</h4>

<ul>
<li><p>初始化的成员自动选举为 Primary Member</p></li>
<li><p>Failover：对所有在线成员的 UUID 排序，选最小的为 Primary Member,复制正常进行，但要注意，客户端获取 Primary Memory 的 UUID，然后连接新的 Primary Memory</p></li>
</ul>

<pre><code class="language-sql"># 任何成员查询 Primary Member 的 UUID
show global status like &#39;group_replication_primary_member&#39;;

or

SELECT * FROM performance_shchema.global_status WHERE variable_name = &#39;group_replication_primary_member&#39;;
</code></pre>

<h4 id="toc_14">读写自动切换</h4>

<p>成员加入默认为 &quot;只读&quot; 模式，只有选取为 Primary Member 才会是 &quot;写&quot; 模式</p>

<pre><code>SET GLOBAL super_read_only = 1;
SET GLOBAL super_read_only = 0;
</code></pre>

<h4 id="toc_15">缺点</h4>

<ul>
<li>Failover 后，客户端根据 UUID 判断是不是 Primary Member</li>
</ul>

<h3 id="toc_16">多主模式</h3>

<h4 id="toc_17">自增字段</h4>

<pre><code class="language-sql">-- 原 MySQL 自增变量
SET GLOBAL auto_increment_offset = N;
SET GLOBAL auto_increment_increment = N;

# Group Replicaion 组复制自增步长，默认为 7，最大节点为 9
SET GLOBAL group_replication_auto_increment_increment = N; 
</code></pre>

<blockquote>
<p>注意：<br/>
a. 如果 server-id 为 1、2、3 配置，就不需要额外配置，但不为 1、2、3 则需要配置<br/>
若没有配置 auto_increment_increment、auto_increment_offset，则自动将 group_replication_auto_increment_increment 和 server-id 设置到 auto_increment_increment、auto_increment_offset上</p>

<p>b.  auto_increment_increment 尽量设置大于或等于成员数，最好大于，因为方便以后增加节点，扩展时再改变自增比较麻烦</p>
</blockquote>

<h4 id="toc_18">优点</h4>

<ul>
<li>当一个成员故障，只有一部分连接失效，应用影响小</li>
<li>当关闭一个 MySQL 节点时，可以先将连接平滑转移到其他机器上再关闭这个节点，不会瞬断</li>
<li>性能好　[有待评估] ???</li>
</ul>

<h4 id="toc_19">缺点</h4>

<ul>
<li>自增步长要大于成员数，防止以后扩展麻烦</li>
<li>不支持串行(SERIALIZABLE) 隔离等级，单节点通过锁实现</li>
<li>不支持外键级联操作</li>
</ul>

<pre><code># 当为 True，当发现上面 2 个不支持就会报错，单主模式下为必须为 OFF
group_replication_enforce_update_everywhere_checks = TRUE
</code></pre>

<ul>
<li>DDL 语句并发执行的问题</li>
</ul>

<blockquote>
<p>多主复制，通过冲突检测来辨别冲突事务，再回滚，5.7 的 DDL 不是原子操作无法回滚，因此 GR 没到 DDL 做冲突检测，如果 DDL 和有冲突的语句发生在不同成员，可能导致数据不一致.</p>

<p><strong><u>所以必须执行 DDL 前必须将有冲突的事务迁移到一台机器上执行</u></strong></p>
</blockquote>

<ul>
<li>DBA 维护时要注意防止脑裂 ???</li>
</ul>

<blockquote>
<p>当维护节点 s3时，从DNS下线s3，但在执行 stop group_replication时，因为DNS缓存，要注意应用长链接或短链接是否继续连接此实例。(普通用户不受影响，注意用户权限)</p>
</blockquote>

<pre><code># super 用户查看 read_only 并 stop group_replication，super_read_only 由 ON -&gt; OFF，read_only 一直是 ON
localhost.(none)&gt;show variables like &#39;%read_only%&#39;;
+------------------+-------+
| Variable_name    | Value |
+------------------+-------+
| innodb_read_only | OFF   |
| read_only        | ON    |
| super_read_only  | ON    |
| tx_read_only     | OFF   |
+------------------+-------+
4 rows in set (0.00 sec)

localhost.(none)&gt;stop group_replication;
Query OK, 0 rows affected (8.15 sec)

localhost.(none)&gt;show variables like &#39;%read_only%&#39;;
+------------------+-------+
| Variable_name    | Value |
+------------------+-------+
| innodb_read_only | OFF   |
| read_only        | ON    |
| super_read_only  | OFF   |
| tx_read_only     | OFF   |
+------------------+-------+
4 rows in set (0.00 sec)

# 普通用户登陆测试
mysql -utest_user -ptest_user -hlocalhost -S /tmp/mysql6666.sock test

mysql&gt; insert into t_n values(1,&#39;test1&#39;);
ERROR 1290 (HY000): The MySQL server is running with the --read-only option so it cannot execute this statement

# Super 用户测试
mysqlha_login.sh 6666

localhost.(none)&gt;use test;
Database changed
localhost.test&gt;insert into t_n values(1,&#39;test1&#39;);
Query OK, 1 row affected (0.00 sec)

# 怎么加入 Group Replication，可参考(组成员事务不一致)
</code></pre>

<h4 id="toc_20">多主模式思考</h4>

<ul>
<li>写请求可以分发多个成员上</li>
<li><p>控制 DDL，当有 DDL 执行时，所有写请求转移到同一台 MySQL 机器 [这个实现有点复杂]</p></li>
<li><p>折中方案，多主模式当单主模式使用</p>

<ul>
<li>与单主模式比较，去掉 Failover 主从切换</li>
<li>解决 DDL 冲突问题，防止脑裂</li>
<li>一套 GR 为多应用提供服务，多应用不同的数据，没有冲突</li>
</ul></li>
</ul>

<pre><code class="language-sql">-- Session 1: A Member
BEGIN
INSERT INTO t1 VALUES(1);

-- Session 2: B Member
TRUNCATE t1;

-- Session 1:
COMMIT;

----&gt; 2 个 session 事务执行顺序不同

-- SESSION 1：
INSERT INTO t1 VALUES(1);
TRUNCATE t1;

-- SESSION 2:
TRUNCATE t1;
INSERT INTO t1 VALUES(1);
</code></pre>

<h2 id="toc_21">配置 Group Replication</h2>

<h3 id="toc_22">必要配置</h3>

<h5 id="toc_23">复制用户</h5>

<pre><code>SET SQL_LOG_BIN=0;
CREATE USER rpl_user@&#39;%&#39; IDENTIFIED BY &#39;rpl_pass&#39;;
GRANT REPLICATION SLAVE ON *.* TO rpl_user@&#39;%&#39;;
FLUSH PRIVILEGES;
SET SQL_LOG_BIN=1;
</code></pre>

<blockquote>
<p>每个节点都要单独配置，如果 MySQL 初始化已经创建，则可以省略此步</p>

<p>连接到哪个成员上去复制，是由 Group Replication插件随机选择，因为为 group_replication_reocvery 配置的用户每个成员上都要存在</p>
</blockquote>

<h5 id="toc_24">my.cnf 配置</h5>

<pre><code># my.cnf
server_id                   = 1
log_bin                     = binlog
relay_log                   = relay-log
gtid_mode                   = ON
enforce_gtid_consistency    = ON
binlog_format               = ROW
transaction-isolation       = READ-COMMITTED
binlog_checksum             = NONE
master_info_repository      = TABLE
relay_log_info_repository   = TABLE
log_slave_update            = ON
slave_parallel_type         = LOGIAL_CLOCK
slave_parallel_workers      = 8
slave_preserve_commit_order = ON

# Group Replication
plugin-load                        = group_replication.so
transaction_write_set_extraction   = XXHASH64
loose-group_replication_group_name = 93f19c6c-6447-11e7-9323-cb37b2d517f3
loose-group_replication_start_on_boot = OFF
loose-group_replication_local_address = &#39;db1:3306&#39;
loose-group_replication_group_seeds   = &#39;db2:3306,db3:3306&#39;
group_replication_ip_whitelist  = &#39;10.0.0.0/8&#39;
loose-group_replication_bootstrap_group = OFF
# loose-group_replication_single_primary_mode = OFF       # Trun off Single primary
# group_replication_enforce_update_everywhere_checks = ON # Multi-Primary Mode
loose-group_replication_transaction_size_limit = 52428800 # 5.7.19 Configures the maximum transaction size in bytes which the group accepts
# loose-group_replication_unreachable_majority_timeout
report_host = &#39;域名&#39;
report_port = 3306
</code></pre>

<p>配置说明：</p>

<ul>
<li><p>开启 Binlog、Relaylog</p></li>
<li><p>开启 GTID 功能</p></li>
<li><p>设置 ROW 格式的 Binlog</p></li>
<li><p>禁用 binlog_checksum (MySQL 5.7.17 不支持带 checksum Binlog Event)</p></li>
<li><p>要使用多源复制，必须使用将 Slave 通道(Channel) 的状态信息存储到系统表</p></li>
<li><p>开启并行复制</p></li>
<li><p>开启主键信息采集</p>

<blockquote>
<p>GR 需要 Server 层采集更新数据的主键信息，被 HASH 存储起来，支持两种 HASH 算法：XXHASH64、MURMUR32，默认 transaction_write_set_extraction = OFF，所以要使用 Group Replication 每张表都要有主键，否则更新数据时会失败</p>

<p><u><strong>一个组内的所有成员必须配置相同的 HASH 算法</strong></u></p>
</blockquote></li>
<li><p>plugin-load = &#39;group_replication.so&#39; 相当执行 INSTALL PLUGIN group_replication SONAME &quot;group_replication.so&quot;;</p></li>
<li><p>group_replication_group_name = <uuid> 设置 Group Replication Name，可以通过 select uuid(); 获得</p></li>
<li><p>group_replication_start_on_boot = OFF MySQL 启动时，不自动启动 Group Replication</p></li>
<li><p>group_replication_local_address = <a href="ip:port">ip:port</a> 配置 Group Replication 本地成员监听端口，成员之间通过这个端口通信，如果所有成员不在一台机器上，不要配置 127.0.0.1，要配置成员内网IP和端口</p></li>
<li><p>group_replication_group_seeds = <a href="ip:port,ip:port...">ip:port,ip:port...</a> 配置种子成员，新成员加入组时，需要与组内成员通信，请求配组重新配置允许它加入组，不写所有成员也可以</p></li>
</ul>

<blockquote>
<ul>
<li>当多个 Server 同时加入组时，确保使用已经存在组的成员，不要使用正在申请加入组的成员，不支持创建组的时候同时加入多个成员</li>
<li>从当前view随机选取数据源成员通信，当多个成员进入组时，同一 Server几乎不会重复选择，如果访问失败则自动连接新的数据源成员，一直达到连接重试限制(group_replication_recovery_retry_count = 10 可动态修改)，恢复线程将被中止并报错</li>
<li>恢复程序不会在每次尝试连接数据源(donor)后休眠，仅当对所有可能的数据源进行尝试无果后才休眠(group_replication_recovery_reconnect_interval = 60 秒 可动态修改)</li>
</ul>

<p>增强数据源节点切换 Enhanced Automatic Donor Switchover</p>

<ul>
<li>已清除数据：如果所选择的数据源成员，在恢复过程中所需某数据已经删除，则会出现错误，恢复程序检测到此错误并重新选择新的数据源成员</li>
<li>重复数据：当新成员加入已经包含一些与所选择数据源成员相冲突的数据，恢复过程中报错，这可能新成员存在一些错误的事务。有人认识可能恢复应该失败退出，而不是切换另一个数据源成员，但在异构集群中一些成员共享冲突事务，有些没有，当错误发生时，恢复可以选择另一个数据源成员(donor)</li>
<li>其他错误：如果任何线程恢复失败(接收或应用线程失败)，则会出现错误，恢复程序在组内选择一个新的数据源成员(donor)</li>
</ul>

<p>在一些持续故障或短暂的故障时，恢复程序自动重试到相同或新的数据源成员(the same or a new donor)</p>
</blockquote>

<ul>
<li><p>group_replication_ip_whitelist = <ip,net,...> <u><strong>一定要设置白名单</strong></u>，若不配置默认为AUTOMATIC，自动识别本机网口的私网地址和私网网段，127.0.0.1 连接请求始终被允许，配置白名单一定要关闭 Group Replication</p></li>
<li><p>group_replication_bootstrap_group = OFF 如果为 ON 告诉 Group Replication 插件，它是组内第一个成员，要做初始化，初始化后改为 OFF</p></li>
</ul>

<blockquote>
<p>只在 Group Replication 初始化时或整个组崩溃后恢复的情况下使用，当多个 Server 配置此参数，可能人为造成脑裂</p>
</blockquote>

<ul>
<li>group_replication 变量加上 &quot;loose&quot; ，则可写入 my.cnf 配置文件中</li>
</ul>

<h3 id="toc_25">加载 Group Replication 插件</h3>

<h4 id="toc_26">安装插件</h4>

<pre><code># 加载插件
INSTALL PLUGIN group_replication SONAME &#39;group_replication.so&#39;;

# 启用插件
START GROUP_REPLICATION;
    &gt; 将 MySQL 加入一个存在的 Group Replication 组或将它初始化为组内第一个成员 
     
# 停用插件
STOP GROUP_REPLICATION;
    &gt; 将 MySQL 从一个 Group Replication 组内移除
</code></pre>

<h4 id="toc_27">初始化组</h4>

<pre><code>INSTALL PLUGIN group_replication SONAME &quot;group_replication.so&quot;;
SET GLOBAL group_replication_group_name = &quot;93f19c6c-6447-11e7-9323-cb37b2d517f3&quot;;  # 可以 select uuid(); 生成
SET GLOBAL group_replication_local_address = &quot;dbaone:7777&quot;;
SET GLOBAL group_replication_bootstrap_group = ON
START GROUP_REPLICATION;
SET GLOBAL group_replication_bootstrap_group = OFF
</code></pre>

<h4 id="toc_28">新成员加入</h4>

<pre><code>INSTALL PLUGIN group_replication SONAME &quot;group_replication.so&quot;;
SET GLOBAL group_replication_group_name = &quot;93f19c6c-6447-11e7-9323-cb37b2d517f3&quot;;  # 可以 select uuid(); 生成
SET GLOBAL group_replication_local_address = &quot;127.0.0.1:7777&quot;;
SET GLOBAL group_replication_group_seeds = &quot;db2:7777&quot;;
change master to master_user = &#39;replica&#39;,master_password=&#39;eHnNCaQE3ND&#39; for channel &#39;group_replication_recovery&#39;;
START GROUP_REPLICATION;
</code></pre>

<blockquote>
<p>注：如果在 my.ncf 已经配置，这里初始化和新成员加入有些步骤就不需要做了</p>
</blockquote>

<p>初始化：</p>

<pre><code>START GROUP_REPLICATION;
SET GLOBAL group_replication_bootstrap_group = OFF
</code></pre>

<p>新成员加入</p>

<pre><code>change master to master_user = &#39;replica&#39;,master_password=&#39;eHnNCaQE3ND&#39; for channel &#39;group_replication_recovery&#39;;
START GROUP_REPLICATION;
</code></pre>

<blockquote>
<p>注：</p>

<ul>
<li>当新成员加入，首先从其他节点，把它加入之前的数据复制过来，这些数据不能通过 Group Replication 通信协议进行复制，而是使用 group_replication_recovery 异步复制通道(Channel)

<ul>
<li>要保证 Binlog 一直存在，否则需要数据初始化，将数据恢复到最近的时间点再加入组 ???(wait 测试)</li>
</ul></li>
<li>连接到哪个成员上去复制，是由 Group Replication插件随机选择，因为为 group_replication_reocvery 配置的用户每个成员上都要存在</li>
<li>在启动 group_replication_recovery 之前，Group Replication 会自动为其配置 MASTER_HOST、MASTER_PORT</li>
<li>当一个成员加入时，会收到组内其他成员的配置信息，包括主机名和端口，主机名和端口是从 全局只读变量 hostname、port 获取，如果hostname 无法解析成IP或网络中使用网络地址映射，group_replication_recover 通道无法正常工作

<ul>
<li>/etc/hosts 配置所有成员的主机名和IP地址对应关系</li>
<li>配置 MySQL report_host、report_port，Group Replication 会优先使用此参数</li>
</ul></li>
</ul>
</blockquote>

<h3 id="toc_29">Group Replication 网络分区</h3>

<p>当有多个节点意外故障，法定人数可能会丢失，导致大多数成员从组内被移除。</p>

<p>例如5个成员的GR，若同时3个成员突然没有消息，大多数成员仲裁的规则被破坏，因为不能实现仲裁，事实上剩下的2个成员不能辨别其他3个server是否崩溃或网络分隔成独立的2个server，因此该组不能重新配置。</p>

<p>如果有成员主动退出，那么它会告知组进行重新配置。实际上，一个将要离开的成员告知其他成员，它将要离开，其他成员可以重新配置组，保持组内成员关系一致，并重新计算仲裁数，如果5个成员，如果3个成员一个接一个离开组，总数从5-&gt;2，同样的时间，确保法定人数。</p>

<h4 id="toc_30">检测分区</h4>

<p>正常情况，组内每个成员均可通过 performance_schema.replication_group_members 查询所有成员状态，每个成员的状态，也是视图中所有成员共同决议的。</p>

<p>如果存在网络分隔，表内访问不到的成员状态是 “UNREACHABLE”，由 Group Replicaion 内置的本地故障检测器完成。</p>

<p>As such, lets assume that there is a group with these 5 servers in it:</p>

<ul>
<li>Server s1 with member identifier 199b2df7-4aaf-11e6-bb16-28b2bd168d07</li>
<li>Server s2 with member identifier 199bb88e-4aaf-11e6-babe-28b2bd168d07</li>
<li>Server s3 with member identifier 1999b9fb-4aaf-11e6-bb54-28b2bd168d07</li>
<li>Server s4 with member identifier 19ab72fc-4aaf-11e6-bb51-28b2bd168d07</li>
<li>Server s5 with member identifier 19b33846-4aaf-11e6-ba81-28b2bd168d07</li>
</ul>

<pre><code>mysql&gt; SELECT * FROM performance_schema.replication_group_members;
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| group_replication_applier | 1999b9fb-4aaf-11e6-bb54-28b2bd168d07 | 127.0.0.1   |       13002 | ONLINE       |
| group_replication_applier | 199b2df7-4aaf-11e6-bb16-28b2bd168d07 | 127.0.0.1   |       13001 | ONLINE       |
| group_replication_applier | 199bb88e-4aaf-11e6-babe-28b2bd168d07 | 127.0.0.1   |       13000 | ONLINE       |
| group_replication_applier | 19ab72fc-4aaf-11e6-bb51-28b2bd168d07 | 127.0.0.1   |       13003 | ONLINE       |
| group_replication_applier | 19b33846-4aaf-11e6-ba81-28b2bd168d07 | 127.0.0.1   |       13004 | ONLINE       |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
5 rows in set (0,00 sec)

# 当同时3个成员失去联系 (s3、s4、s5)，此时在s1上查看

mysql&gt; SELECT * FROM performance_schema.replication_group_members;
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| group_replication_applier | 1999b9fb-4aaf-11e6-bb54-28b2bd168d07 | 127.0.0.1   |       13002 | UNREACHABLE  |
| group_replication_applier | 199b2df7-4aaf-11e6-bb16-28b2bd168d07 | 127.0.0.1   |       13001 | ONLINE       |
| group_replication_applier | 199bb88e-4aaf-11e6-babe-28b2bd168d07 | 127.0.0.1   |       13000 | ONLINE       |
| group_replication_applier | 19ab72fc-4aaf-11e6-bb51-28b2bd168d07 | 127.0.0.1   |       13003 | UNREACHABLE  |
| group_replication_applier | 19b33846-4aaf-11e6-ba81-28b2bd168d07 | 127.0.0.1   |       13004 | UNREACHABLE  |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
5 rows in set (0,00 sec)
</code></pre>

<h4 id="toc_31">解除分隔</h4>

<p>解决</p>

<ul>
<li>停止 s1、s2 的组复制或完成停了实例，找到其他三个成员停止的原因，然后重新启动组复制(或服务)</li>
<li>group_replication_force_members 强制这个参数列表成员组成 Group，其实成员移出组 (<u><strong>谨慎操作，防止脑裂</strong></u>)</li>
</ul>

<p>强制组成员配置</p>

<p><img src="https://dev.mysql.com/doc/refman/5.7/en/images/gr-majority-lost-to-stable-group.png" style="zoom:50%" /></p>

<blockquote>
<p>假设只有 s1、s2 在线，s3、s4、s5 意外离开并不在线，可以强制让 s1、s2组成一个组 (membership)</p>

<p>group_replication_force_members 被视为最后补救措施，一定小心使用，仅当多数成员导致不能仲裁时使用，如果被滥用，可能导致<u><strong>脑裂和阻塞整个系统</strong></u></p>
</blockquote>

<p><strong><u>确定 s3、s4、s5 一定不在线，不可访问，如果这三个成员分区隔离(因为占大多数)，强制 s1、s2组成新组，造成人为脑裂</u></strong></p>

<pre><code>
# s1 查看

mysql&gt; SELECT * FROM performance_schema.replication_group_members;
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| group_replication_applier | 1999b9fb-4aaf-11e6-bb54-28b2bd168d07 | 127.0.0.1   |       13002 | UNREACHABLE  |
| group_replication_applier | 199b2df7-4aaf-11e6-bb16-28b2bd168d07 | 127.0.0.1   |       13001 | ONLINE       |
| group_replication_applier | 199bb88e-4aaf-11e6-babe-28b2bd168d07 | 127.0.0.1   |       13000 | ONLINE       |
| group_replication_applier | 19ab72fc-4aaf-11e6-bb51-28b2bd168d07 | 127.0.0.1   |       13003 | UNREACHABLE  |
| group_replication_applier | 19b33846-4aaf-11e6-ba81-28b2bd168d07 | 127.0.0.1   |       13004 | UNREACHABLE  |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
5 rows in set (0,00 sec)

# 检查s1、s2 Group Replication 通信地址 group_replication_local_address

mysql&gt; SELECT @@group_replication_local_address;
+-----------------------------------+
| @@group_replication_local_address |
+-----------------------------------+
| 127.0.0.1:10000                   |
+-----------------------------------+
1 row in set (0,00 sec)

mysql&gt; SELECT @@group_replication_local_address;
+-----------------------------------+
| @@group_replication_local_address |
+-----------------------------------+
| 127.0.0.1:10001                   |
+-----------------------------------+
1 row in set (0,00 sec)

# 强制重新配置组成员 s1 (127.0.0.1 只是列表，真实环境要看变量 group_replication_local_address)
SET GLOBAL group_replication_force_members=&quot;127.0.0.1:10000,127.0.0.1:10001&quot;;

# 检查 s1

mysql&gt; select * from performance_schema.replication_group_members;
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| group_replication_applier | b5ffe505-4ab6-11e6-b04b-28b2bd168d07 | 127.0.0.1   |       13000 | ONLINE       |
| group_replication_applier | b60907e7-4ab6-11e6-afb7-28b2bd168d07 | 127.0.0.1   |       13001 | ONLINE       |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
2 rows in set (0,00 sec)

# 检查 s2

mysql&gt; select * from performance_schema.replication_group_members;
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| group_replication_applier | b5ffe505-4ab6-11e6-b04b-28b2bd168d07 | 127.0.0.1   |       13000 | ONLINE       |
| group_replication_applier | b60907e7-4ab6-11e6-afb7-28b2bd168d07 | 127.0.0.1   |       13001 | ONLINE       |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
2 rows in set (0,00 sec)

</code></pre>

<h3 id="toc_32">多主模式 (wait)</h3>

<h2 id="toc_33">问题处理</h2>

<h3 id="toc_34">1. 网络中断/分区处理</h3>

<p>可以参考 <a href="https://www.percona.com/blog/2017/02/24/battle-for-synchronous-replication-in-mysql-galera-vs-group-replication/">Quest for Better Replication in MySQL: Galera vs. Group Replication</a></p>

<p>当一个成员因为为网络问题被清除 Group Replication，需要手工处理，当网络恢复不能自动加入，PXC是可以的</p>

<p>error log 日志显示如下</p>

<pre><code>2017-07-14T11:58:57.208677+08:00 0 [Note] Plugin group_replication reported: &#39;[GCS] Removing members that have failed while processing new view.&#39;
2017-07-14T11:58:57.273764+08:00 0 [Note] Plugin group_replication reported: &#39;getstart group_id 6c6c3761&#39;
2017-07-14T11:58:57.274693+08:00 0 [Note] Plugin group_replication reported: &#39;getstart group_id 6c6c3761&#39;
2017-07-14T11:59:00.531055+08:00 0 [Note] Plugin group_replication reported: &#39;state 4330 action xa_terminate&#39;
2017-07-14T11:59:00.531314+08:00 0 [Note] Plugin group_replication reported: &#39;new state x_start&#39;
2017-07-14T11:59:00.531338+08:00 0 [Note] Plugin group_replication reported: &#39;state 4257 action xa_exit&#39;
2017-07-14T11:59:00.531365+08:00 0 [Note] Plugin group_replication reported: &#39;Exiting xcom thread&#39;
2017-07-14T11:59:00.531365+08:00 0 [Note] Plugin group_replication reported: &#39;Exiting xcom thread&#39;
2017-07-14T11:59:00.531401+08:00 0 [Note] Plugin group_replication reported: &#39;new state x_start&#39;
</code></pre>

<p>当前节点状态</p>

<pre><code class="language-sql">SELECT * FROM performance_schema.replication_group_members;

+---------------------------+--------------------------------------+--------------+-------------+--------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST  | MEMBER_PORT | MEMBER_STATE |
+---------------------------+--------------------------------------+--------------+-------------+--------------+
| group_replication_applier | 817b0415-661a-11e7-842a-782bcb479deb | 10.55.28.64  |        6666 | ERROR       |
+---------------------------+--------------------------------------+--------------+-------------+--------------+
1 row in set (0.00 sec)

</code></pre>

<p>处理步骤：</p>

<pre><code>localhost.(none)&gt;start group_replication; 
ERROR 3093 (HY000): The START GROUP_REPLICATION command failed since the group is already running.

localhost.(none)&gt;stop group_replication;
Query OK, 0 rows affected (11.35 sec)

localhost.(none)&gt;start group_replication; 
Query OK, 0 rows affected (5.53 sec)

localhost.(none)&gt;SELECT * FROM performance_schema.replication_group_members;
+---------------------------+--------------------------------------+--------------+-------------+--------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST  | MEMBER_PORT | MEMBER_STATE |
+---------------------------+--------------------------------------+--------------+-------------+--------------+
| group_replication_applier | 817b0415-661a-11e7-842a-782bcb479deb | 10.55.28.64  |        6666 | ONLINE       |
| group_replication_applier | c745233b-6614-11e7-a738-40f2e91dc960 | 10.13.2.29   |        6666 | ONLINE       |
| group_replication_applier | e99a9946-6619-11e7-9b07-70e28406ebea | 10.77.16.197 |        6666 | ONLINE       |
+---------------------------+--------------------------------------+--------------+-------------+--------------+
3 rows in set (0.00 sec)

</code></pre>

<h3 id="toc_35">2. 组成员事务不一致</h3>

<p>被隔离成员，有不是 Group Replication 组内的事务，默认是不能加入到 Group，<u><strong>若人为可知是一致性，可强制加入，谨慎使用</strong></u></p>

<pre><code>
localhost.(none)&gt;stop group_replication;

localhost.(none)&gt;SELECT * FROM performance_schema.replication_group_members;
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| group_replication_applier | c745233b-6614-11e7-a738-40f2e91dc960 | 10.13.2.29  |        6666 | OFFLINE      |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
1 row in set (0.00 sec)

localhost.test&gt;create table t2 (id int primary key ,name varchar(10));
Query OK, 0 rows affected (0.01 sec)

localhost.test&gt;show variables like &#39;%read_only%&#39;;
+------------------+-------+
| Variable_name    | Value |
+------------------+-------+
| innodb_read_only | OFF   |
| read_only        | OFF   |
| super_read_only  | OFF   |
| tx_read_only     | OFF   |
+------------------+-------+
4 rows in set (0.00 sec)

localhost.test&gt;start group_replication;
ERROR 3092 (HY000): The server is not configured properly to be an active member of the group. Please see more details on error log.
</code></pre>

<p>error 日志</p>

<pre><code>2017-07-14T15:00:14.966294+08:00 0 [Note] Plugin group_replication reported: &#39;A new primary was elected, enabled conflict detection until the new primary applies all relay logs&#39;
2017-07-14T15:00:14.966366+08:00 0 [ERROR] Plugin group_replication reported: &#39;This member has more executed transactions than those present in the group. Local transactions: 5860d02e-4b55-11e7-8721-40f2e91dc960:1-788,
93f19c6c-6447-11e7-9323-cb37b2d517f3:1-16,
c745233b-6614-11e7-a738-40f2e91dc960:1 &gt; Group transactions: 5860d02e-4b55-11e7-8721-40f2e91dc960:1-788,
93f19c6c-6447-11e7-9323-cb37b2d517f3:1-16&#39;
2017-07-14T15:00:14.966383+08:00 0 [ERROR] Plugin group_replication reported: &#39;The member contains transactions not present in the group. The member will now exit the group.&#39;
2017-07-14T15:00:14.966366+08:00 0 [ERROR] Plugin group_replication reported: &#39;This member has more executed transactions than those present in the group. Local transactions: 5860d02e-4b55-11e7-8721-40f2e91dc960:1-788,
93f19c6c-6447-11e7-9323-cb37b2d517f3:1-16,
c745233b-6614-11e7-a738-40f2e91dc960:1 &gt; Group transactions: 5860d02e-4b55-11e7-8721-40f2e91dc960:1-788,
93f19c6c-6447-11e7-9323-cb37b2d517f3:1-16&#39;
2017-07-14T15:00:14.966383+08:00 0 [ERROR] Plugin group_replication reported: &#39;The member contains transactions not present in the group. The member will now exit the group.&#39;
2017-07-14T15:00:14.966392+08:00 0 [Note] Plugin group_replication reported: &#39;To force this member into the group you can use the group_replication_allow_local_disjoint_gtids_join option&#39;
2017-07-14T15:00:14.966473+08:00 88181 [Note] Plugin group_replication reported: &#39;Going to wait for view modification&#39;
2017-07-14T15:00:14.968087+08:00 0 [Note] Plugin group_replication reported: &#39;getstart group_id 6c6c3761&#39;
2017-07-14T15:00:18.464227+08:00 0 [Note] Plugin group_replication reported: &#39;state 4330 action xa_terminate&#39;
2017-07-14T15:00:18.464840+08:00 0 [Note] Plugin group_replication reported: &#39;new state x_start&#39;
2017-07-14T15:00:18.464875+08:00 0 [Note] Plugin group_replication reported: &#39;state 4257 action xa_exit&#39;
2017-07-14T15:00:18.465367+08:00 0 [Note] Plugin group_replication reported: &#39;Exiting xcom thread&#39;
2017-07-14T15:00:18.465382+08:00 0 [Note] Plugin group_replication reported: &#39;new state x_start&#39;
2017-07-14T15:00:23.486593+08:00 88181 [Note] Plugin group_replication reported: &#39;auto_increment_increment is reset to 1&#39;
2017-07-14T15:00:23.486642+08:00 88181 [Note] Plugin group_replication reported: &#39;auto_increment_offset is reset to 1&#39;
2017-07-14T15:00:23.486838+08:00 88211 [Note] Error reading relay log event for channel &#39;group_replication_applier&#39;: slave SQL thread was killed
2017-07-14T15:00:23.487244+08:00 88208 [Note] Plugin group_replication reported: &#39;The group replication applier thread was killed&#39;
</code></pre>

<p>强制加入，一定要确定不会导致数据不一致，谨慎操作</p>

<pre><code>localhost.test&gt;SET GLOBAL group_replication_allow_local_disjoint_gtids_join = ON ;
Query OK, 0 rows affected (0.00 sec)

localhost.test&gt;start group_replication;
Query OK, 0 rows affected (2.26 sec)

localhost.test&gt;SET GLOBAL group_replication_allow_local_disjoint_gtids_join = OFF ;
Query OK, 0 rows affected (0.00 sec)

localhost.test&gt;show variables like &#39;%read_only%&#39;;
+------------------+-------+
| Variable_name    | Value |
+------------------+-------+
| innodb_read_only | OFF   |
| read_only        | ON    |
| super_read_only  | ON    |
| tx_read_only     | OFF   |
+------------------+-------+
4 rows in set (0.00 sec)
</code></pre>

<h3 id="toc_36">3. 大事务导致组成员被移除或切换</h3>

<p>测试如下，在 5.7.17、5.7.18 都有此问题，fix 5.7.19 加了一个限制大事务的参数 <a href="https://dev.mysql.com/doc/refman/5.7/en/group-replication-options.html#sysvar_group_replication_transaction_size_limit"><code>group_replication_transaction_size_limit</code></a>  <a href="https://bugs.mysql.com/bug.php?id=84785">#84785</a></p>

<pre><code># 单主模式 5.7.18
CREATE TABLE `kafkaoffset_api_log` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `developer` varchar(20) NOT NULL DEFAULT &#39;&#39; ,
  ctime timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;request api time&#39;,
  PRIMARY KEY (`id`),
  KEY idx_time(ctime,developer)
);

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 1 row affected (0.01 sec)
Records: 1  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 2 rows affected (0.01 sec)
Records: 2  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 4 rows affected (0.00 sec)
Records: 4  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 8 rows affected (0.01 sec)
Records: 8  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 16 rows affected (0.00 sec)
Records: 16  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 32 rows affected (0.01 sec)
Records: 32  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 64 rows affected (0.00 sec)
Records: 64  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 128 rows affected (0.00 sec)
Records: 128  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 256 rows affected (0.02 sec)
Records: 256  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 512 rows affected (0.02 sec)
Records: 512  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 1024 rows affected (0.05 sec)
Records: 1024  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 2048 rows affected (0.08 sec)
Records: 2048  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 4096 rows affected (0.17 sec)
Records: 4096  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 8192 rows affected (0.33 sec)
Records: 8192  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 16384 rows affected (0.62 sec)
Records: 16384  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 32768 rows affected (1.09 sec)
Records: 32768  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 65536 rows affected (2.29 sec)
Records: 65536  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 131072 rows affected (5.00 sec)
Records: 131072  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 262144 rows affected (8.44 sec)
Records: 262144  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select devloper,now() from kafkaoffset_api_log;
ERROR 1054 (42S22): Unknown column &#39;devloper&#39; in &#39;field list&#39;
localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 524288 rows affected (15.79 sec)
Records: 524288  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
Query OK, 1048576 rows affected (36.33 sec)
Records: 1048576  Duplicates: 0  Warnings: 0

localhost.test&gt;insert into kafkaoffset_api_log(developer,ctime) select developer,now() from kafkaoffset_api_log;
ERROR 3101 (HY000): Plugin instructed the server to rollback the current transaction.

# 当前成员
localhost.test&gt;SELECT * FROM performance_schema.replication_group_members;
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
| group_replication_applier | 817b0415-661a-11e7-842a-782bcb479deb | 10.55.28.64 |        6666 | ERROR        |
+---------------------------+--------------------------------------+-------------+-------------+--------------+
1 row in set (0.00 sec)

# 其他成员
localhost.test&gt;SELECT * FROM performance_schema.replication_group_members;
+---------------------------+--------------------------------------+--------------+-------------+--------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST  | MEMBER_PORT | MEMBER_STATE |
+---------------------------+--------------------------------------+--------------+-------------+--------------+
| group_replication_applier | c745233b-6614-11e7-a738-40f2e91dc960 | 10.13.2.29   |        6666 | ONLINE       |
| group_replication_applier | e99a9946-6619-11e7-9b07-70e28406ebea | 10.77.16.197 |        6666 | ONLINE       |
+---------------------------+--------------------------------------+--------------+-------------+--------------+
2 rows in set (0.00 sec)
</code></pre>

<p>因为执行大事务，在内存分配、网络宽带开销上面，导致故障检测触发使成员处于不可访问状态。</p>

<p>解决：5.7.19 引进一个参数  <a href="https://dev.mysql.com/doc/refman/5.7/en/group-replication-options.html#sysvar_group_replication_transaction_size_limit"><code>group_replication_transaction_size_limit</code></a> ，默认是0，是没有限制，需要根据 MGR 工作负载设置比较合理的值。</p>

<pre><code># 恢复组成员
localhost.test&gt;stop group_replication ;
Query OK, 0 rows affected (5.67 sec)

localhost.test&gt;start group_replication;
Query OK, 0 rows affected (2.40 sec)

localhost.test&gt;SELECT * FROM performance_schema.replication_group_members;
+---------------------------+--------------------------------------+--------------+-------------+--------------+
| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST  | MEMBER_PORT | MEMBER_STATE |
+---------------------------+--------------------------------------+--------------+-------------+--------------+
| group_replication_applier | 817b0415-661a-11e7-842a-782bcb479deb | 10.55.28.64  |        6666 | ONLINE       |
| group_replication_applier | c745233b-6614-11e7-a738-40f2e91dc960 | 10.13.2.29   |        6666 | ONLINE       |
| group_replication_applier | e99a9946-6619-11e7-9b07-70e28406ebea | 10.77.16.197 |        6666 | ONLINE       |
+---------------------------+--------------------------------------+--------------+-------------+--------------+
3 rows in set (0.00 sec)
</code></pre>

<h2 id="toc_37">自动化兼容</h2>

<h3 id="toc_38">监控</h3>

<ol>
<li>所有节点 group_replication_single_primary_mode 值不同</li>
<li>单主模式下，切库上下线域名ip</li>
</ol>

<pre><code>mysql&gt; show variables like &#39;group_replication_single_primary_mode&#39;;
+---------------------------------------+-------+
| Variable_name                         | Value |
+---------------------------------------+-------+
| group_replication_single_primary_mode | ON    |
+---------------------------------------+-------+
1 row in set (0.00 sec)
</code></pre>

<h3 id="toc_39">备份</h3>

<p>mb 备份</p>

<p>innobackupex 备份</p>

<h3 id="toc_40">扩容</h3>

<p>slave 扩容</p>

<p>innobackupex 扩容</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis Install 3.2.9]]></title>
    <link href="https://saup007.github.io/14999625908463.html"/>
    <updated>2017-07-14T00:16:30+08:00</updated>
    <id>https://saup007.github.io/14999625908463.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">编译步骤</a>
</li>
<li>
<a href="#toc_1">配置文件</a>
</li>
<li>
<a href="#toc_2">Key 类型</a>
</li>
<li>
<a href="#toc_3">编译失败排错</a>
<ul>
<li>
<a href="#toc_4">1. make test 失败 -- 缺少 tcl</a>
</li>
<li>
<a href="#toc_5">2. make test 失败 -- 内存少bug</a>
</li>
</ul>
</li>
</ul>


<span id="more"></span><!-- more -->

<p>Redis 单线程架构 + I/O 多路复用来实现高性能内存数据库服务</p>

<pre><code>本次编译环境 CentOS 6.5

依赖 gcc、tcl
</code></pre>

<h2 id="toc_0">编译步骤</h2>

<pre><code class="language-command">yum install tcl
tar xf redis-3.2.9.tar
cd redis-2.2.9
make
make test
cd src
make test
make install
</code></pre>

<h2 id="toc_1">配置文件</h2>

<p>默认配置</p>

<pre><code class="language-redis.conf">bind 127.0.0.1
protected-mode yes
port 6379
tcp-backlog 511
timeout 0
tcp-keepalive 300
daemonize no
supervised no
pidfile /var/run/redis_6379.pid
loglevel notice
logfile &quot;&quot;
databases 16
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
dir ./
slave-serve-stale-data yes
slave-read-only yes
repl-diskless-sync no
repl-diskless-sync-delay 5
repl-disable-tcp-nodelay no
slave-priority 100
appendonly no
appendfilename &quot;appendonly.aof&quot;
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
lua-time-limit 5000
slowlog-log-slower-than 10000
slowlog-max-len 128
latency-monitor-threshold 0
notify-keyspace-events &quot;&quot;
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
aof-rewrite-incremental-fsync yes
</code></pre>

<pre><code class="language-redis.cnf">port
logfile
dir
daemonize
</code></pre>

<h2 id="toc_2">Key 类型</h2>

<p>五种数据结构</p>

<ul>
<li>string 字符串 (Bitmaps 位图、HyperLogLog)</li>
<li>hash   哈希</li>
<li>list   列表</li>
<li>set    集合</li>
<li>zset   有序合集</li>
<li>GEO 地理信息定位 Redis 3.2</li>
</ul>

<pre><code>sting 最大值不能超过 512M
</code></pre>

<p>Redis 数据结构和内部编码</p>

<p><img src="media/14983146118446/Redis%20data%20encoding.jpg" alt="Redis data encoding"/></p>

<p>一种数据结构对应多个内部编码优点</p>

<ul>
<li><p>当有更优秀内部编码可替换，对外结构和命令没有影响<br/>
exp: list 提供 quicklist，结合 ziplist、linkedlist两者优势</p></li>
<li><p>多种内部编码实现不同场景下发挥各自的优势 <br/>
exp: ziplist 比较省内存,但列表元素多时性能下降,会根据配置将 list 内部实现转换为 linkedlist</p></li>
</ul>

<h2 id="toc_3">编译失败排错</h2>

<h3 id="toc_4">1. make test 失败 -- 缺少 tcl</h3>

<pre><code class="language-err">[root@dbaone redis-3.2.9]# make install
cd src &amp;&amp; make install
make[1]: Entering directory `/data/redis-3.2.9/src&#39;

Hint: It&#39;s a good idea to run &#39;make test&#39; ;)

    INSTALL install
    INSTALL install
    INSTALL install
    INSTALL install
    INSTALL install
make[1]: Leaving directory `/data/redis-3.2.9/src&#39;
[root@dbaone redis-3.2.9]#
[root@dbaone redis-3.2.9]# make test
cd src &amp;&amp; make test
make[1]: Entering directory `/data/redis-3.2.9/src&#39;
You need tcl 8.5 or newer in order to run the Redis test
make[1]: *** [test] Error 1
make[1]: Leaving directory `/data/redis-3.2.9/src&#39;
make: *** [test] Error 2
</code></pre>

<p>解决：tcl 8.5 以上版本</p>

<pre><code>yum install tcl -y
</code></pre>

<h3 id="toc_5">2. make test 失败 -- 内存少bug</h3>

<pre><code class="language-err">!!! WARNING The following tests failed:

*** [err]: Slave should be able to synchronize with the master in tests/integration/replication-psync.tcl
Replication not started.
*** [err]: Test replication partial resync: ok after delay (diskless: yes, reconnect: 1) in tests/integration/replication-psync.tcl
Expected &#39;623331211feaf78c74df41dc934bfc8af5a89a69&#39; to be equal to &#39;0000000000000000000000000000000000000000&#39;
Cleanup: may take some time... OK
make[1]: *** [test] Error 1
make[1]: Leaving directory `/data/redis-3.2.9/src&#39;
make: *** [test] Error 2

</code></pre>

<p>解决：<a href="Two%20tests%20failing%20in%20unstable%20#2715">#2715</a> -- <a href="https://github.com/antirez/redis/commit/6a33952b8af18c4c0e778d93a69d97bc2adbc52e">fixbug 2715</a> -- <a href="http://36006798.blog.51cto.com/988282/1858935">blog 参考</a></p>

<pre><code>vim tests/integration/replication-psync.tcl
113     #test_psync {ok psync} 6 100000000 3600 0 {
114     test_psync {ok psync} 6 10000000000 3600 0 {

make test

或

# 增加编译机器内存 1G -&gt; 2G

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Redis]]></title>
    <link href="https://saup007.github.io/14999625750663.html"/>
    <updated>2017-07-14T00:16:15+08:00</updated>
    <id>https://saup007.github.io/14999625750663.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">为什么选择使用 Redis</a>
</li>
<li>
<a href="#toc_1">为什么单线程还能这么快</a>
</li>
<li>
<a href="#toc_2">使用场景</a>
<ul>
<li>
<a href="#toc_3">String 使用场景</a>
</li>
<li>
<a href="#toc_4">Hash 使用场景</a>
</li>
<li>
<a href="#toc_5">List 使用场景</a>
</li>
<li>
<a href="#toc_6">SET 使用场景</a>
</li>
<li>
<a href="#toc_7">ZSET 使用场景</a>
</li>
</ul>
</li>
</ul>


<span id="more"></span><!-- more -->

<h2 id="toc_0">为什么选择使用 Redis</h2>

<ul>
<li><p>速度快</p>

<ul>
<li>内存</li>
<li>C 语言</li>
<li>单线程，预防多线程竞争</li>
</ul></li>
<li><p>基于键值对的数据结构</p>

<ul>
<li>五种基础数据结构，衍生多种数据结构 (Bitmaps、HyperLogLog、GEO)</li>
</ul></li>
<li><p>丰富的功能</p>

<ul>
<li>Key 过期，实现缓存</li>
<li>发布订阅，实现消息系统</li>
<li>支持 Lua 脚本，可以创造新的 Redis 命令</li>
<li>支持简单的事务</li>
<li>提供流水线 (Pipeline)，一批命令一次性传到 Redis，减少网络开销</li>
</ul></li>
<li><p>简单稳定</p>

<ul>
<li>代码少</li>
<li>单线程，模型简单</li>
<li>不依赖操作系统中的类库，自己实现事件处理相关功能</li>
</ul></li>
<li><p>客户端语言多</p>

<ul>
<li>Java</li>
<li>PHP</li>
<li>Python</li>
<li>C</li>
<li>C++</li>
<li>Nodejs</li>
<li><a href="https://redis.io/clients">等等...</a></li>
</ul></li>
<li><p>持久化</p>

<ul>
<li>RDB</li>
<li>AOF</li>
</ul></li>
<li><p>主从复制</p></li>
<li><p>高可用和分布式</p>

<ul>
<li>Redis Sentinel (Reids 2.8)</li>
<li>Redis Cluster 提供真正分布式、高可用、读写和容量扩展</li>
</ul></li>
</ul>

<h2 id="toc_1">为什么单线程还能这么快</h2>

<ul>
<li>纯内存访问：内存响应时间大概为 100 纳秒，这是每秒达到厅万级重要基础</li>
<li>非阻塞 I/O：epoll I/O 多路复用技术，自身事件处理模型将 epoll 中的连接、读写、关闭都转换为事件，不在网络 I/O 浪费时间</li>
<li>单线程避免线程切换和竞态产生的消耗</li>
</ul>

<p>单线程的优点：</p>

<ul>
<li>可以简化数据结构和算法的实现</li>
<li>单线程避免多线程切换和竞态产生的消耗，锁和线程切换通常是性能杀手</li>
</ul>

<p>单线程缺点：</p>

<ul>
<li>每个命令不能执行过长，会造成其他命令阻塞 </li>
</ul>

<h2 id="toc_2">使用场景</h2>

<h3 id="toc_3">String 使用场景</h3>

<ul>
<li>缓存 (string) {MySQL 缓存}</li>
<li>计数器 (string[incr])</li>
<li>共享session {负载均衡的 web 服务器 session 集中管理}</li>
<li>限速 {手机验证码 1 分钟不能超过 5 次，一个 IP 地址不能在 1 秒访问 n 次} set ex nx</li>
</ul>

<h3 id="toc_4">Hash 使用场景</h3>

<ul>
<li>关系型数据库列属性</li>
</ul>

<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>city</th>
</tr>
</thead>

<tbody>
<tr>
<td>1</td>
<td>tom</td>
<td>23</td>
<td>beiing</td>
</tr>
<tr>
<td>2</td>
<td>mike</td>
<td>30</td>
<td>tianjing</td>
</tr>
</tbody>
</table>

<p>user:1 -&gt; </p>

<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>city</th>
</tr>
</thead>

<tbody>
<tr>
<td>1</td>
<td>tom</td>
<td>23</td>
<td>beijing</td>
</tr>
</tbody>
</table>

<p>user:2</p>

<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>city</th>
</tr>
</thead>

<tbody>
<tr>
<td>2</td>
<td>mike</td>
<td>30</td>
<td>tianjing</td>
</tr>
</tbody>
</table>

<pre><code>其实有三种方法缓存用户信息

1. 原生字符串：每个属于一个 Key

set user:1 name tom
set user:1 age 23
set user:1 city beijing

优点：简单直观，每个属性都支持更新操作
缺点：占用过多 key，内存占用大，用户信息内聚性差，一般不会在生产环境使用

2. 序列化字符串：将用户信息序列化用一个 key 保存

set user:1 serialize(userInfo)

优点：简化编程，如果合理的使用序列化可以提高内存使用率
缺点：序列化、反序列化有性能开销，每次更新属性需要把所有数据全取出来反序列化，更新后，序列化到 Redis

3.  Hash：每个用户属性使用一对 &quot;filed - value&quot;，但只用一个 key 保存

hset user:1 name tom age 23 city beijing

优点：简单直观，如果使用合理可以减少内在空间使用
缺点：要控制 ziplist、hashtable 两种内部编码的转换，hashtable 会消耗更多内存
</code></pre>

<h3 id="toc_5">List 使用场景</h3>

<ul>
<li><p>消息队列</p>

<p>lpush + brpop 组合实现阻塞队列，生产者使用 lpush 从左侧插入元素，多个消费使用 brpop 阻塞式&quot;抢&quot;列表尾部元素，多个客户端保证消费的负载均衡和高可用</p></li>
<li><p>文章列表</p>

<p>List 有序、支持按照索引取元素</p>

<pre><code class="language-python"># 每个用户自己的文章列表

用户(key) --&gt; 文章(list) --&gt; 文章内容(hash)

每篇文章使用 Hash，每篇文件有 3 个属性 title、timestamp、content

hmset article:1 title xx timestamp 1476536196 content xxxx
...
hmset article:k title xx timestamp 1476512536 content yyyy
...

向用户文章列表添加文章 user:{id}:acticles 作为文件列表的 Key

lpush user:1:article article:1 article:3
...
lpush user:k:article article:5

分页获取用户文章列表，下面伪代码将用户 id=1 的前 10 篇文件

articles = lrange user:1:articles 0 9
for article in {articles}
    hgetall {article}

</code></pre>

<p>注：使用 List 存文章两个问题</p>

<ol>
<li>每次分页获取的文章个数较多，需要执行 hgetall 多次，可以考虑使用 pipline批量获取，或者考虑文章数据序列化为字符串类型，使用 mget 批量获取。</li>
<li>分页获取文章列表时，lrange 命令在列表两端性能较好，但如果列表较大，获取列表中间范围元素性能会变差，可以考虑将 List 做二级分拆或使用 Redis 3.2 的 quicklist 内部编码实现，它结果 ziplist、linkedlist 特点，获致列表中间范围的元素也可以高效完成</li>
</ol></li>
<li><p>栈 lpush + lpop = Stack</p></li>
<li><p>队列 lpush + rpop = Queue</p></li>
<li><p>有限集合  lpush + ltrim = Capped Collection</p></li>
<li><p>消息队列  lpuush + brpop = Message Queue</p></li>
</ul>

<h3 id="toc_6">SET 使用场景</h3>

<ul>
<li>标签 tag</li>
</ul>

<pre><code>
# 给用户添加标签
sadd user:1:tags tag1 tag2 tag5
sadd user:2:tags tag2 tag3 tag5
...
sadd user:2:tags tag1 tag2 tag4
...

# 给标签添加用户

sadd tag1:users user:1 user:3
sadd tag2:users user:1 user:2 user:3
...
sadd tagk:users user:1 user:2
...

# 删除用户下的标签
srem user:1:tags tag1 tag5
...

# 删除标签 下的用户
srem tag1:users user:1
srem tag5:users user:1

# 计算用户共同感兴趣的标签
sinter user:1:tags user:2:tags

</code></pre>

<blockquote>
<p>用户和标签的关系维护应该在一个事务内执行，防止部分命令失败造成数据不一致，如何来实现，要依赖 Lua</p>
</blockquote>

<ul>
<li>生成随机数，抽奖 spop/srandmember = Random item</li>
<li>sadd + sinter = Social Graph 社交需求</li>
</ul>

<h3 id="toc_7">ZSET 使用场景</h3>

<ul>
<li>排行榜</li>
</ul>

<pre><code># 添加用户赞数，用户 mike 上传一个视频，并获取 3 个赞
zadd user:ranking:2016_03_15 3 mike

如果再获取赞
zincrby user:ranking:2016_03_15 1 mike

# 取消用户赞
zrem user:ranking:2016_03_15 mike

# 展示获取赞数最多的十个用户
zrevrangebyrank user:ranking:2016_03_15 0 9

# 展示用户信息以及用户分数
将用户名作为 Key 后缀，将用户信息保存在哈希类型中，用户的分数和排名可使用 zscore、zrank

hgetall user:info:tom
zscore user:ranking:2016_03_15 mike
zrank user:ranking:2016_03_15 mike

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis 命令]]></title>
    <link href="https://saup007.github.io/14999625646195.html"/>
    <updated>2017-07-14T00:16:04+08:00</updated>
    <id>https://saup007.github.io/14999625646195.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">通用命令</a>
</li>
<li>
<a href="#toc_1">Key 管理</a>
<ul>
<li>
<a href="#toc_2">单个 Key 管理</a>
</li>
<li>
<a href="#toc_3">遍历 Key</a>
</li>
<li>
<a href="#toc_4">数据库管理</a>
</li>
</ul>
</li>
<li>
<a href="#toc_5">字符串命令</a>
<ul>
<li>
<a href="#toc_6">String 命令时间复杂度</a>
</li>
</ul>
</li>
<li>
<a href="#toc_7">Hash 命令</a>
<ul>
<li>
<a href="#toc_8">Hash 命令时间复杂度</a>
</li>
</ul>
</li>
<li>
<a href="#toc_9">List 命令</a>
<ul>
<li>
<a href="#toc_10">添加操作</a>
</li>
<li>
<a href="#toc_11">查找</a>
</li>
<li>
<a href="#toc_12">删除</a>
</li>
<li>
<a href="#toc_13">修改</a>
</li>
<li>
<a href="#toc_14">阻塞操作</a>
<ul>
<li>
<a href="#toc_15">brpop 注意事项</a>
</li>
</ul>
</li>
<li>
<a href="#toc_16">List 命令时间复杂度</a>
</li>
</ul>
</li>
<li>
<a href="#toc_17">集合 SET</a>
<ul>
<li>
<a href="#toc_18">集合内操作</a>
<ul>
<li>
<a href="#toc_19">添加元素</a>
</li>
<li>
<a href="#toc_20">删除元素</a>
</li>
<li>
<a href="#toc_21">计算元素个数</a>
</li>
<li>
<a href="#toc_22">判断元素是否在集合中</a>
</li>
<li>
<a href="#toc_23">随机从集合返回指定个数元素</a>
</li>
<li>
<a href="#toc_24">从集合随机弹出元素</a>
</li>
<li>
<a href="#toc_25">获取所有元素</a>
</li>
</ul>
</li>
<li>
<a href="#toc_26">集合间操作</a>
<ul>
<li>
<a href="#toc_27">交集</a>
</li>
<li>
<a href="#toc_28">并集</a>
</li>
<li>
<a href="#toc_29">差集</a>
</li>
<li>
<a href="#toc_30">将交集、并集、差集结果保存</a>
</li>
</ul>
</li>
<li>
<a href="#toc_31">SET 命令时间复杂度</a>
</li>
</ul>
</li>
<li>
<a href="#toc_32">有序集合</a>
<ul>
<li>
<a href="#toc_33">列表 List、集合 Set、有序集合 Zset 异同</a>
</li>
<li>
<a href="#toc_34">集合内操作</a>
<ul>
<li>
<a href="#toc_35">添加成员</a>
</li>
<li>
<a href="#toc_36">计算成员个数</a>
</li>
<li>
<a href="#toc_37">计算某个成员分数</a>
</li>
<li>
<a href="#toc_38">计算成员排名</a>
</li>
<li>
<a href="#toc_39">删除成员</a>
</li>
<li>
<a href="#toc_40">增加成员的分数</a>
</li>
<li>
<a href="#toc_41">返回指定排名范围的成员</a>
</li>
<li>
<a href="#toc_42">返回指定分数范围的成员</a>
</li>
<li>
<a href="#toc_43">返回指定分数范围成员个数</a>
</li>
<li>
<a href="#toc_44">删除指定排名内的升序元素</a>
</li>
<li>
<a href="#toc_45">删除指定分数范围的成员</a>
</li>
</ul>
</li>
<li>
<a href="#toc_46">集合间操作</a>
<ul>
<li>
<a href="#toc_47">交集</a>
</li>
<li>
<a href="#toc_48">并集</a>
</li>
</ul>
</li>
<li>
<a href="#toc_49">有序集合 ZSET 命令时间复杂度</a>
</li>
</ul>
</li>
</ul>


<span id="more"></span><!-- more -->

<p>srandmember</p>

<h2 id="toc_0">通用命令</h2>

<pre><code class="language-python"># Start Redis Service
redis-server redis.conf &amp;

# Login
redis-cli -h -p

# Shutdown (nosave 关闭前是否生成持久化文件)
# 可以使用 kill, 不要使用 kill -9 没有持久化、极端情况 AOF 和复制丢失数据
redis-cli shutdown [nosave]|[save]

# 查看所有键 (慎用 复杂度 O(n))
keys *

# 键总数 (取 redis 内置键总数变量 复杂度 O(1))
dbsize

# 键是否存在 (1 存在 0 不存在)
exists key

# 删除键 (无论什么数据类型,返回成功删除 key 个数,删除不存在的 key 返回 0)
del key [key ...]

# 键过期
expire hello seconds

返回大于 0 的整数:键剩余过期时间
返回 -1:键没有设置过期时间
返回 -2:键不存在

ttl key 可以查看 key 剩余过期时间

# 键的数据类型结构
type key

返回为 key 数据类型 (string 字符串、hash 哈希、list 列表、set 集合、zset 有序集合)
返回 none，key 存在

# 查看 key 内部编码
object encoding key

</code></pre>

<h2 id="toc_1">Key 管理</h2>

<h3 id="toc_2">单个 Key 管理</h3>

<h3 id="toc_3">遍历 Key</h3>

<h3 id="toc_4">数据库管理</h3>

<h2 id="toc_5">字符串命令</h2>

<pre><code class="language-python"># set
set key value [ex seconds] [px milliseconds] [nx|xx]

    * ex seconds：为 key 设置秒级过期时间
    * px milliseconds：为 key 设置毫秒级过期时间
    * nx：key 必须不存在才可以设置成功，用于添加
    * xx：与 nx 相反，key 必须存在才可以设置成功，用于更新

    setnx setxx 与 ex、xx 选项一样
    setnx 可以作为分布式锁的一种实现  [链接](https://redis.io/topics/distlock)
    
# get (若 key 不存在，返回 nil(空))
get key

# mset
mset key value [key values ...]

# mget
mget key [key ...]

# incr 计数(自增)
incr key

    127.0.0.1:6379&gt; set age 10
    OK
    127.0.0.1:6379&gt; incrby age 10
    (integer) 20

    * 返回值不是整数，返回错误
    * 返回值是整数，返回自增后的结果
    * 键不存在，按照值为 0 自增，返回结果为 1

# append
append key value

# strlen
strlen key

# getset (设置并返回原值)
getset key value

# setrange (设置指定位置的字符)
setrange key offset value

    # pest -&gt; best 
    set redis pest
    setrange redis 0 b
    
# getrange (获取部分字符串,start 从 0 开始)
getrant key start end

</code></pre>

<p>自增扩展命令</p>

<table>
<thead>
<tr>
<th>incr</th>
<th>自增</th>
</tr>
</thead>

<tbody>
<tr>
<td>decr</td>
<td>自减</td>
</tr>
<tr>
<td>incrby</td>
<td>自增指定数字</td>
</tr>
<tr>
<td>decrby</td>
<td>自增指定数字</td>
</tr>
<tr>
<td>incrbyfloat</td>
<td>自增浮点数</td>
</tr>
</tbody>
</table>

<h3 id="toc_6">String 命令时间复杂度</h3>

<table>
<thead>
<tr>
<th>命令</th>
<th>时间复杂度</th>
</tr>
</thead>

<tbody>
<tr>
<td>set key value</td>
<td>O(1)</td>
</tr>
<tr>
<td>get key</td>
<td>O(1)</td>
</tr>
<tr>
<td>del key [key ...]</td>
<td>O(k) k 是 key 个数</td>
</tr>
<tr>
<td>mset key value [key value ...]</td>
<td>O(k) k 是 key 个数</td>
</tr>
<tr>
<td>mget key [key ...]</td>
<td>O(k) k 是 key 个数</td>
</tr>
<tr>
<td>incr key</td>
<td>O(1)</td>
</tr>
<tr>
<td>decr key</td>
<td>O(1)</td>
</tr>
<tr>
<td>incrby key increment</td>
<td>O(1)</td>
</tr>
<tr>
<td>decrby key increment</td>
<td>O(1)</td>
</tr>
<tr>
<td>incrbyfloat key increment</td>
<td>O(1)</td>
</tr>
<tr>
<td>append key value</td>
<td>O(1)</td>
</tr>
<tr>
<td>strlen key</td>
<td>O(1)</td>
</tr>
<tr>
<td>setrange key offset value</td>
<td>O(1)</td>
</tr>
<tr>
<td>getrange key start end</td>
<td>O(n) n 是字符串长度，由于获取字符串非常快，若不是很长，可以视同 O(1)</td>
</tr>
</tbody>
</table>

<h2 id="toc_7">Hash 命令</h2>

<pre><code class="language-python"># hset
hset key field value

成功 返回 1
失败 返回 0

    hset user:1 name tom
    
    hsetnx：与 setnx 一样，作用域由 key 变为 field
    
# hget
hget key field

成功 返回 value
key 不存在返回 nil

# hdel
hdel key field [field ...]

成功 返回删除 field 个数
field 不存在，返回 0

    hdel user:1 name
# hlen (计算 field 个数)
hlen key

# hmset hmset 批量设置或获取 field-value
hmget key field [field]
hset key field value [field  value ...]

    127.0.0.1:6379&gt; hmset user:1 name mike age 12 city tianjin
    OK
    
    127.0.0.1:6379&gt; hmget user:1 name age
    1) &quot;mike&quot;
    2) &quot;12&quot;
    
# exists (field 是否存在)
hexists key field

存在返回 1
不存在返回 0

    127.0.0.1:6379&gt; hexists user:1 name
    (integer) 1

# hkeys (获取所有 field)
hkeys key

    127.0.0.1:6379&gt; hkeys user:1
    1) &quot;name&quot;
    2) &quot;age&quot;
    3) &quot;city&quot;

# hvals (获取所有 value)
hvals key

    127.0.0.1:6379&gt; hvals user:1
    1) &quot;mike&quot;
    2) &quot;12&quot;
    3) &quot;tianjin&quot;

# hgetall (获取所有 field value) [慎用]
hgetall key

    127.0.0.1:6379&gt; hgetall user:1
    1) &quot;name&quot;
    2) &quot;mike&quot;
    3) &quot;age&quot;
    4) &quot;12&quot;
    5) &quot;city&quot;
    6) &quot;tianjin&quot;
    
若 hash 元素较多，会阻塞 redis ，获取部分 field，可使用 hmget，一定获取全部 field，hscan 渐进式遍历 Hash

# hscan

?

# hincrby hincrbyfloat

hincrby key field
hincrbyfloat key field

    127.0.0.1:6379&gt; hincrby user:1 age 10
    (integer) 22

hincrby、hincrbyfloat 与 incrby、incrbyfloat 一样，但作用域是 field

# hstrlen (计算 value 的字符串长度 Redis 3.2 以上)
hstrlen key field

    127.0.0.1:6379&gt; hstrlen user:1 name
    (integer) 4


</code></pre>

<h3 id="toc_8">Hash 命令时间复杂度</h3>

<table>
<thead>
<tr>
<th>command</th>
<th>时间复杂底</th>
</tr>
</thead>

<tbody>
<tr>
<td>hset key field value</td>
<td>O(1)</td>
</tr>
<tr>
<td>hget key field</td>
<td>O(1)</td>
</tr>
<tr>
<td>hdel key field [field ...]</td>
<td>O(k) k 是 field 个数</td>
</tr>
<tr>
<td>hlen key</td>
<td>O(1)</td>
</tr>
<tr>
<td>hgetall key</td>
<td>O(n) n 是 field 总数</td>
</tr>
<tr>
<td>hmget key field [field …]</td>
<td>O(k) k 是 field 个数</td>
</tr>
<tr>
<td>hmset key field value [field key ...]</td>
<td>O(k) k 是 field 个数</td>
</tr>
<tr>
<td>hexists key field</td>
<td>O(1)</td>
</tr>
<tr>
<td>hkeys key</td>
<td>O(n) n 是 field 总数</td>
</tr>
<tr>
<td>hvals key</td>
<td>O(n) n 是 field 总数</td>
</tr>
<tr>
<td>hsetnx key field value</td>
<td>O(1)</td>
</tr>
<tr>
<td>hincrby key field increment</td>
<td>O(1)</td>
</tr>
<tr>
<td>hincrbyfloat key field increment</td>
<td>O(1)</td>
</tr>
<tr>
<td>hstrlen key field</td>
<td>O(1)</td>
</tr>
</tbody>
</table>

<h2 id="toc_9">List 命令</h2>

<p>List 中每个字符串称为元素(element)，最多 2<sup>32</sup> -1 个元素，可以充当&quot;栈&quot;、&quot;队列&quot;的角色</p>

<p>特点：</p>

<ul>
<li>List 中的 element 是有序的，意味可以通过索引下标获取某个元素或某个范围内的元素列表</li>
<li>List 中的 element 是可以重复的，跟 set、zset 有明显不同</li>
</ul>

<p>List 的四种操作类型</p>

<table>
<thead>
<tr>
<th>操作类型</th>
<th>操作</th>
</tr>
</thead>

<tbody>
<tr>
<td>添加</td>
<td>rpush lpush linsert</td>
</tr>
<tr>
<td>查</td>
<td>lrange lindex llen</td>
</tr>
<tr>
<td>删除</td>
<td>lpop rpop lrem ltrim</td>
</tr>
<tr>
<td>修改</td>
<td>lset</td>
</tr>
<tr>
<td>阻塞操作</td>
<td>blpop brpop</td>
</tr>
</tbody>
</table>

<h3 id="toc_10">添加操作</h3>

<pre><code class="language-python"># 从左边插入元素
rpush key value [value . ..]

    127.0.0.1:6 379&gt; rpush listkey c b a
    (integer) 3

lrange 0 -1 从左到右获取列表所有元素

    127.0.0.1:6379&gt; lrange listkey 0 -1
    1) &quot;c&quot;
    2) &quot;b&quot;
    3) &quot;a&quot;

# 从左边插入
lpush key value [value ...]

# 向某个元素前或后插入元素
linsert key before|alter pivot value
    
    # 在元素 b 前插入元素 java，返回结果代表当前 list 长度
    127.0.0.1:6379&gt; linsert listkey before b java
    (integer) 4
    127.0.0.1:6379&gt; lrange listkey 0 -1
    1) &quot;c&quot;
    2) &quot;java&quot;
    3) &quot;b&quot;
    4) &quot;a&quot;

# 

</code></pre>

<h3 id="toc_11">查找</h3>

<pre><code class="language-python"># 获取指定范围内的元素列表
lrange key start end

索引下标特点

    * 从左到右，0 -&gt; N-1，从右到左，-1 -&gt; -N
    * end 选项包含自身，即 lrange key 1 3 获取下标为 1、2、3 三个元素
    * 
    127.0.0.1:6379&gt; lrange listkey 0 2
    1) &quot;c&quot;
    2) &quot;java&quot;
    3) &quot;b&quot;

# 获取 List 指定索引标下的元素
lindex key index
    
    # 获取 listkey 最后一个元素
    127.0.0.1:6379&gt; lindex listkey -1
    &quot;a&quot;

# 获取列表长度
llen  key

    127.0.0.1:6379&gt; llen listkey
    (integer) 4


</code></pre>

<h3 id="toc_12">删除</h3>

<pre><code class="language-python"># 从列表左侧弹出元素
lpop key

    127.0.0.1:6379&gt; lrange listkey 0 -1
    1) &quot;c&quot;
    2) &quot;java&quot;
    3) &quot;b&quot;
    4) &quot;a&quot;
    127.0.0.1:6379&gt; lpop listkey
    &quot;c&quot;
    127.0.0.1:6379&gt; lrange listkey 0 -1
    1) &quot;java&quot;
    2) &quot;b&quot;
    3) &quot;a&quot;：

# 从列表右侧弹出
rpop key

# 删除指定元素
lrem key count value

lrem 从列表找到等于 value 的元素删除，根据 count 不同

    * count &gt; 0，从左到右，删除最多 count 个元素
    * count &lt; 0，从右到左，删除最多 count 个元素
    * count = 0，删除所有

    # 从左向右插入 5 个 a，从左边删除 4 个为 a 的元素
    127.0.0.1:6379&gt; lpush listkey a
    (integer) 4
    127.0.0.1:6379&gt; lpush listkey a
    (integer) 5
    127.0.0.1:6379&gt; lpush listkey a
    (integer) 6
    127.0.0.1:6379&gt; lpush listkey a
    (integer) 7
    127.0.0.1:6379&gt; lpush listkey a
    (integer) 8
    127.0.0.1:6379&gt; lrange listkey 0 -1
    1) &quot;a&quot;
    2) &quot;a&quot;
    3) &quot;a&quot;
    4) &quot;a&quot;
    5) &quot;a&quot;
    6) &quot;java&quot;
    7) &quot;b&quot;
    8) &quot;a&quot;
    127.0.0.1:6379&gt; lrem listkey 4 a
    (integer) 4
    127.0.0.1:6379&gt; lrange listkey 0 -1
    1) &quot;a&quot;
    2) &quot;java&quot;
    3) &quot;b&quot;
    4) &quot;a&quot;

# 按索引范围修改剪列表
ltrim key start end

    # 保留列表下标为 1-3的元素，即第 2 个到第 4 个
    127.0.0.1:6379&gt; lrange listkey 0 -1
    1) &quot;a&quot;
    2) &quot;java&quot;
    3) &quot;b&quot;
    4) &quot;a&quot;
    127.0.0.1:6379&gt; ltrim listkey 1 3
    OK
    127.0.0.1:6379&gt; lrange listkey 0 -1
    1) &quot;java&quot;
    2) &quot;b&quot;
    3) &quot;a&quot;

</code></pre>

<h3 id="toc_13">修改</h3>

<pre><code class="language-python"># 修改指定下标的元素
lset key index newvalue

    127.0.0.1:6379&gt; lrange listkey 0 -1
    1) &quot;java&quot;
    2) &quot;b&quot;
    3) &quot;a&quot;
    127.0.0.1:6379&gt; lset listkey 2 python
    OK
    127.0.0.1:6379&gt; lrange listkey 0 -1
    1) &quot;java&quot;
    2) &quot;b&quot;
    3) &quot;python&quot;

</code></pre>

<h3 id="toc_14">阻塞操作</h3>

<pre><code class="language-python"># key 多个列表的 key，timeout 为阻塞时间(单位为秒 s)
blpop key [key ...] timeout
brpop key [key ...] timeout
 
blopo、brpop 是 lpop、rpop 阻塞版本

</code></pre>

<ul>
<li><p>列表为空</p>

<p>timeout=3，客户端要等 3 秒返回，timeout=0，客户端一直阻塞下去</p></li>
</ul>

<pre><code class="language-python">    127.0.0.1:6379&gt; brpop list:test 3
    (nil)
    (3.05s)
    
    127.0.0.1:6379&gt; brpop list:test 0
    
    ... 阻塞 ...
    
    # 在此期间另一个 session 加元素 element1，则 brpop 客户端立即返回
    127.0.0.1:6379&gt; lpush list:test element1
    (integer) 1
    
    127.0.0.1:6379&gt; brpop list:test 0
    1) &quot;list:test&quot;
    2) &quot;element1&quot;
    (304.53s)
    
</code></pre>

<ul>
<li>列表不为空，客户端立即返回</li>
</ul>

<h4 id="toc_15">brpop 注意事项</h4>

<ol>
<li><p>如果多个 key，brpop 会从左到右遍历 key，一旦有一个 key 能弹出元素客户端立即返回</p>

<pre><code>127.0.0.1:6379&gt; brpop list:1 list:2 list:3 0
... 阻塞 ...

# 另一客户端分别向 list:2、list:3 插入元素 
127.0.0.1:6379&gt; lpush list:2 element2
(integer) 1
127.0.0.1:6379&gt; lpush list:3 element3
(integer) 1

# 客户端会立即返回 list:2 中的 element2，因为 list:2 最先有可以弹出的元素

127.0.0.1:6379&gt; brpop list:1 list:2 list:3 0
1) &quot;list:2&quot;
2) &quot;element2&quot;
(43.29s)

</code></pre></li>
<li><p>多个客户端对同一个 key 执行 brpop，最先执行的 brpop 的客户端获致弹出的值，其他客户端阻塞等待</p></li>
</ol>

<h3 id="toc_16">List 命令时间复杂度</h3>

<table>
<thead>
<tr>
<th>操作类型</th>
<th>命令</th>
<th>时间复杂度</th>
</tr>
</thead>

<tbody>
<tr>
<td>添加</td>
<td>rpush key value [value ...]</td>
<td>O(k) k是元素个数</td>
</tr>
<tr>
<td></td>
<td>lpush key value [value ...]</td>
<td>O(k) k是元素个数</td>
</tr>
<tr>
<td></td>
<td>linsert key before</td>
<td>after pivot value</td>
</tr>
<tr>
<td>查找</td>
<td>lrange key start end</td>
<td>O(s+n) s 是 start 偏移量，n 是 start 到 end 的范围</td>
</tr>
<tr>
<td></td>
<td>lindex key index</td>
<td>O(n) n是索引偏移量</td>
</tr>
<tr>
<td></td>
<td>llen key</td>
<td>O(1)</td>
</tr>
<tr>
<td>删除</td>
<td>lpop key</td>
<td>O(1)</td>
</tr>
<tr>
<td></td>
<td>rpop key</td>
<td>O(1)</td>
</tr>
<tr>
<td></td>
<td>lrem count value</td>
<td>O(n)</td>
</tr>
<tr>
<td></td>
<td>ltrim key start end</td>
<td>O(n) n 是要裁剪的元素总数</td>
</tr>
<tr>
<td>修改</td>
<td>lset key index value</td>
<td>O(n) n 是索引的偏移量</td>
</tr>
<tr>
<td>阻塞操作</td>
<td>blpop brpop</td>
<td>O(1)</td>
</tr>
</tbody>
</table>

<h2 id="toc_17">集合 SET</h2>

<p>元素不重复，不能通过索引下标获取元素，一个集合最多可以存储 2<sup>32-1</sup> 个元素</p>

<h3 id="toc_18">集合内操作</h3>

<h4 id="toc_19">添加元素</h4>

<pre><code>sadd key element [element ...]

返回为添加成功的元素个数

    127.0.0.1:6379&gt; exists myset
    (integer) 0
    127.0.0.1:6379&gt; sadd myset a b c
    (integer) 3
    127.0.0.1:6379&gt; sadd myset a b
    (integer) 0
    127.0.0.1:6379&gt;

</code></pre>

<h4 id="toc_20">删除元素</h4>

<pre><code>srem key element [element ...]

返回为成功删除元素的个数

    127.0.0.1:6379&gt; srem myset a b
    (integer) 2
    127.0.0.1:6379&gt; srem myset hello
    (integer) 0
</code></pre>

<h4 id="toc_21">计算元素个数</h4>

<pre><code>scard key

scard 的时间复杂度为 O(1),并不会遍历集合所有元素，直接用 Redis 内部变量

    127.0.0.1:6379&gt; scard myset
    (integer) 1
</code></pre>

<h4 id="toc_22">判断元素是否在集合中</h4>

<pre><code>sismember key element

在集合内返回 1，反之返回 0

    127.0.0.1:6379&gt; sismember myset a
    (integer) 0
    127.0.0.1:6379&gt; sismember myset c
    (integer) 1
</code></pre>

<h4 id="toc_23">随机从集合返回指定个数元素</h4>

<pre><code>srandmember key [count]

[count] 可选，若不写，默认为 1.

    127.0.0.1:6379&gt; srandmember myset 2
    1) &quot;c&quot;
    2) &quot;a&quot;
    127.0.0.1:6379&gt; srandmember myset
    &quot;b&quot;
</code></pre>

<h4 id="toc_24">从集合随机弹出元素</h4>

<pre><code>spop key [count]

Redis 3.2 以后才支持 [count]，与 srandmember 区别是，spop 是随机选中元素并删除，srandmember 并不会删除元素。

    127.0.0.1:6379&gt; smembers myset
    1) &quot;b&quot;
    2) &quot;a&quot;
    3) &quot;c&quot;
    127.0.0.1:6379&gt; spop myset
    &quot;a&quot;
    127.0.0.1:6379&gt; smembers myset
    1) &quot;b&quot;
    2) &quot;c&quot;
    127.0.0.1:6379&gt; spop myset 2
    1) &quot;b&quot;
    2) &quot;c&quot;
    127.0.0.1:6379&gt; smembers myset
    (empty list or set)
</code></pre>

<h4 id="toc_25">获取所有元素</h4>

<pre><code>smembers key

semebers、lrange、hgetall 都属于比较重的命令，如果元素过多存在阻塞 Redis 的可能性，可以使用 sscan 来完成。

    127.0.0.1:6379&gt; smembers myset
    1) &quot;b&quot;
    2) &quot;a&quot;
    3) &quot;c&quot;
</code></pre>

<h3 id="toc_26">集合间操作</h3>

<p>现在有 2 个集合：</p>

<pre><code>127.0.0.1:6379&gt; sadd user:1:follow it music his sports
(integer) 4
127.0.0.1:6379&gt; sadd user:2:follow it news ent sports
(integer) 4
</code></pre>

<p><img src="media/14983286362248/51501425532_.pic%E5%89%AF%E6%9C%AC%202.jpg" alt="51501425532_.pic副本 2" style="width:500px;"/></p>

<h4 id="toc_27">交集</h4>

<pre><code>sinter key [key ...]

    127.0.0.1:6379&gt; sinter user:1:follow user:2:follow
    1) &quot;sports&quot;
    2) &quot;it&quot;
</code></pre>

<h4 id="toc_28">并集</h4>

<pre><code>sunion key [key ...]

    127.0.0.1:6379&gt; sunion sinter user:1:follow user:2:follow
    1) &quot;sports&quot;
    2) &quot;ent&quot;
    3) &quot;music&quot;
    4) &quot;news&quot;
    5) &quot;his&quot;
    6) &quot;it&quot;
</code></pre>

<h4 id="toc_29">差集</h4>

<pre><code>sdiff key [key ...]

    127.0.0.1:6379&gt; sdiff user:1:follow user:2:follow
    1) &quot;music&quot;
    2) &quot;his&quot;
</code></pre>

<h4 id="toc_30">将交集、并集、差集结果保存</h4>

<pre><code>sinterstore destination key [key ...]
sunionstore destination key [key ...]
sdiffstore destination key [key ...]

集合间操作在元素较多时比较耗时

    127.0.0.1:6379&gt; sinterstore user:1_2:inter user:1:follow user:2:follow
    (integer) 2
    127.0.0.1:6379&gt; type user:1_2:inter
    set
    127.0.0.1:6379&gt; smembers user:1_2:inter
    1) &quot;sports&quot;
    2) &quot;it&quot;
</code></pre>

<h3 id="toc_31">SET 命令时间复杂度</h3>

<table>
<thead>
<tr>
<th>命令</th>
<th>时间复杂度</th>
</tr>
</thead>

<tbody>
<tr>
<td>sadd key element [element ...]</td>
<td>O(k) k 是元素个数</td>
</tr>
<tr>
<td>srem key element [elemetn ...]</td>
<td>O(k) k 是元素个数</td>
</tr>
<tr>
<td>scard key</td>
<td>O(1)</td>
</tr>
<tr>
<td>sismember key element</td>
<td>O(1)</td>
</tr>
<tr>
<td>srandmember key [count]</td>
<td>O(count)</td>
</tr>
<tr>
<td>spop key [count]</td>
<td>O(count)</td>
</tr>
<tr>
<td>smembers key</td>
<td>O(n) n 是元素总数</td>
</tr>
<tr>
<td>sinter key [key …] or sinterstore</td>
<td>O(m*k) k 是多个集合中元素最少的个数，m 是 key 个数</td>
</tr>
<tr>
<td>sunion key [key …] or sunionstore</td>
<td>O(k) k 是多个集合元素个数和</td>
</tr>
<tr>
<td>sdiff key [key …] or sdiffstore</td>
<td>O(k) k 是多个集合元素个数和</td>
</tr>
</tbody>
</table>

<h2 id="toc_32">有序集合</h2>

<p>成员不能重复，可以排序，与 List 索引下标作为排序依据不同，每个元素有一个 分数(score) 作为排序依据</p>

<blockquote>
<p>有序集合元素不能重启，但 score 可以重复，相当一个班级学号不能重复，但分数可以相同</p>
</blockquote>

<h3 id="toc_33">列表 List、集合 Set、有序集合 Zset 异同</h3>

<table>
<thead>
<tr>
<th>数据结构</th>
<th>是否允许重复元素</th>
<th>是否有序</th>
<th style="text-align: left">有序实现方式</th>
<th style="text-align: left">应用场景</th>
</tr>
</thead>

<tbody>
<tr>
<td>列表 List</td>
<td>是</td>
<td>是</td>
<td style="text-align: left">索引下标</td>
<td style="text-align: left">时间轴、消息队列</td>
</tr>
<tr>
<td>集合 Set</td>
<td>否</td>
<td>否</td>
<td style="text-align: left">无</td>
<td style="text-align: left">标签、社交</td>
</tr>
<tr>
<td>有序集合 Zset</td>
<td>否</td>
<td>是</td>
<td style="text-align: left">Score</td>
<td style="text-align: left">排行榜、社交</td>
</tr>
</tbody>
</table>

<h3 id="toc_34">集合内操作</h3>

<h4 id="toc_35">添加成员</h4>

<pre><code>zadd key score member [score member ...]

结果返回成功添加成员个数

    127.0.0.1:6379&gt; zadd user:ranking 251 tom
    (integer) 1
</code></pre>

<blockquote>
<p>注意</p>
</blockquote>

<ul>
<li>Redis 3.2 为 zadd 命令添加 nx、xx、ch、incr 四个选项

<ul>
<li>nx: member 必须不存在，才可以设置成功，用于添加。</li>
<li>xx: member 必须存在，才可以设置成功，用于更新。</li>
<li>ch: 返回此次操作后，有序集合元素和分数发生变化的个数。</li>
<li>incr: 对 score 做增加，相当于后面介绍的 zincrby。</li>
</ul></li>
<li>有序集合 zset 相比集合提供了排序字段，产生了代价，zadd 时间复杂度为 O(log(n)),sadd 的时间复杂度为 O(1)。</li>
</ul>

<h4 id="toc_36">计算成员个数</h4>

<pre><code>zcard key

和集合 set 类似命令 scard 一样，时间复杂度为 O(1)

    127.0.0.1:6379&gt; zcard user:ranking
    (integer) 1
</code></pre>

<h4 id="toc_37">计算某个成员分数</h4>

<pre><code>zscore key member

tom 分数为 251，若成员不存在则返回 nil

    127.0.0.1:6379&gt; zscore user:ranking tom
    &quot;251&quot;
    127.0.0.1:6379&gt; zscore user:ranking test
    (nil)
</code></pre>

<h4 id="toc_38">计算成员排名</h4>

<pre><code>zrank key member
zrevrank key member

zrank 从分数从低到高返回排名，zrevrank 反之。

    zrank user:ranking tom
    
    zrevrank user:ranking tom
</code></pre>

<h4 id="toc_39">删除成员</h4>

<pre><code>zrem key member [member]

返回结果为成功删除的个数。

    127.0.0.1:6379&gt; zrem user:ranking tom
    (integer) 1
</code></pre>

<h4 id="toc_40">增加成员的分数</h4>

<pre><code>zincrby key increment member

如果 member 存在，返回增加后的分值，如果 member则添加 member 并给分值

    127.0.0.1:6379&gt; zincrby user:ranking 9 tom
    &quot;260&quot;

    127.0.0.1:6379&gt; zincrby user:ranking 9 test
    &quot;9&quot;
</code></pre>

<h4 id="toc_41">返回指定排名范围的成员</h4>

<pre><code>zrange key start end [withscores]
zrevrange key start end [withscores]

有序集合按分值排序，zrange 是从低到高返回，zrevrange 反之，加上 withscores 返回成员的分数。

返回所有成员和分数
zrange user:ranking:1 0 -1 withscores

    127.0.0.1:6379&gt; zrange user:ranking 0 2 withscores
    1) &quot;test&quot;
    2) &quot;9&quot;
    3) &quot;saup&quot;
    4) &quot;200&quot;
    5) &quot;tom&quot;
    6) &quot;260&quot;
</code></pre>

<h4 id="toc_42">返回指定分数范围的成员</h4>

<pre><code>zrangebyscore key min max [withscores] [limit offset count]
zrevrangebyscore key min max [withscores] [limit offset count]

zrangebyscore 按分数从低到高返回，zrevrangebyscore 反之。加上 withscores 返回成员分数，limit offset count 选项可以限制输出成员起始位置和个数

min、max 支持区间(小括号)和闭区间(中括号)，-inf、+inf 代表无限小和无限朋

    127.0.0.1:6379&gt; zrangebyscore user:ranking 200 221 withscores
    1) &quot;frank&quot;
    2) &quot;200&quot;
    3) &quot;saup&quot;
    4) &quot;200&quot;
    5) &quot;tim&quot;
    6) &quot;220&quot;
    127.0.0.1:6379&gt;
    127.0.0.1:6379&gt; zrevrangebyscore user:ranking 221 200 withscores
    1) &quot;tim&quot;
    2) &quot;220&quot;
    3) &quot;saup&quot;
    4) &quot;200&quot;
    5) &quot;frank&quot;
    6) &quot;200&quot;

    127.0.0.1:6379&gt; zrangebyscore user:ranking (200 +inf withscores
    1) &quot;tim&quot;
    2) &quot;220&quot;
    3) &quot;tom&quot;
    4) &quot;260&quot;

</code></pre>

<h4 id="toc_43">返回指定分数范围成员个数</h4>

<pre><code>zcount key min max

返回 200 - 210 的成员
    127.0.0.1:6379&gt; zcount user:ranking 200 221
    (integer) 3
</code></pre>

<h4 id="toc_44">删除指定排名内的升序元素</h4>

<pre><code>zremrangebyrank key star end

删除第 start 到 end 的成员

    127.0.0.1:6379&gt; zremrangebyrank user:ranking 0 2
    (integer) 3
</code></pre>

<h4 id="toc_45">删除指定分数范围的成员</h4>

<pre><code>zremrangebyscore key min max

将 250 分以上的成员全部删除，返回为成员删除的个数

    127.0.0.1:6379&gt; zremrangebyscore user:ranking (250 +inf
    (integer) 1
</code></pre>

<h3 id="toc_46">集合间操作</h3>

<p>俩个有序集合</p>

<p><img src="media/14983286362248/15014257051358.jpg" alt="" style="width:600px;"/></p>

<pre><code>127.0.0.1:6379&gt; zadd user:ranking:1 1 kris 91 mike 200 frank 220 tim 250 martin 251 tom
(integer) 6
127.0.0.1:6379&gt; zadd user:ranking:2 8 james 77 mike 625 martin 888 tom
(integer) 4
</code></pre>

<h4 id="toc_47">交集</h4>

<pre><code>zinterstore destination numkeys key [key ...] [weights weight [weight ...]] [aggregate sum|min|max]

* destination: 交集计算结果保存到这个 Key
* numkeys: 需要做交集计算 Key 的个数
* key [key ...]: 需要做交集的 Key
* weights weight [weight ...]: 每个 Key 权重，在做交集计算时，每个 Key 的每个 member 会将自己分数乘以这个权重，每个 Key 权重默认为 1
* aggregate sum|min|max: 计算成员交集后，分值可以按照 sum、min、max 做汇总，默认是 sum

对 user:ranking:1、user:ranking:2 交集，weights、aggregate 默认值，目标 Key 对分值做了 sum

    127.0.0.1:6379&gt; zinterstore user:ranking:1_inter_2 2 user:ranking:1 user:ranking:2
    (integer) 3
    127.0.0.1:6379&gt; zrange user:ranking:1_inter_2 0 -1 withscores
    1) &quot;mike&quot;
    2) &quot;168&quot;
    3) &quot;martin&quot;
    4) &quot;875&quot;
    5) &quot;tom&quot;
    6) &quot;1139&quot;
    127.0.0.1:6379&gt;

让 user:ranking:2 权重变为 0.5，并且聚合 max

    127.0.0.1:6379&gt; zinterstore user:ranking:1_inter_2 2 user:ranking:1 user:ranking:2 weights 1 0.5 aggregate max
    (integer) 3
    127.0.0.1:6379&gt; zrange user:ranking:1_inter_2 0 -1 withscores
    1) &quot;mike&quot;
    2) &quot;91&quot;
    3) &quot;martin&quot;
    4) &quot;312.5&quot;
    5) &quot;tom&quot;
    6) &quot;444&quot;
</code></pre>

<h4 id="toc_48">并集</h4>

<pre><code>zunionstore destination numkeys key [key ...] [weights weight [weight...]] [aggregate sum|min|max]

    127.0.0.1:6379&gt; zunionstore user:ranking:1_union_2 2 user:ranking:1 user:ranking:2
    (integer) 7
    127.0.0.1:6379&gt; zrange user:ranking:1_union_2 0 -1 withscores
     1) &quot;kris&quot;
     2) &quot;1&quot;
     3) &quot;james&quot;
     4) &quot;8&quot;
     5) &quot;mike&quot;
     6) &quot;168&quot;
     7) &quot;frank&quot;
     8) &quot;200&quot;
     9) &quot;tim&quot;
    10) &quot;220&quot;
    11) &quot;martin&quot;
    12) &quot;875&quot;
    13) &quot;tom&quot;
    14) &quot;1139&quot;
</code></pre>

<h3 id="toc_49">有序集合 ZSET 命令时间复杂度</h3>

<table>
<thead>
<tr>
<th>命令</th>
<th>时间复杂度</th>
</tr>
</thead>

<tbody>
<tr>
<td>zadd key score member [score member ...]</td>
<td>O(k*log(n)) k 是添加成员个数 n 是当前有序集合成员个数</td>
</tr>
<tr>
<td>zcard key</td>
<td>O(1)</td>
</tr>
<tr>
<td>zscore key member</td>
<td>O(1)</td>
</tr>
<tr>
<td>zrank key member zrevrank key member</td>
<td>O(log(n)) n 是当前有序集合成员个数</td>
</tr>
<tr>
<td>zrem key member [member ...]</td>
<td>O(k*log(n)) k 是删除成员个数，n 是当前有序集合成员个数</td>
</tr>
<tr>
<td>zincrby key increment member</td>
<td>O(log(n)) n 是当前有序集合成员的个数</td>
</tr>
<tr>
<td>zrange key start end [withscores] zrevrange key start end [withscores]</td>
<td>O(log(n)+k) k 是获取成员的个数，n 是当前有序集合成员个数</td>
</tr>
<tr>
<td>zrangebyscore key min max [withscores] zrevrnagebyscore key max min [withscores]</td>
<td>O(log(n)+k) k 是获取成员的个数，n 是当前有序集合成员个数</td>
</tr>
<tr>
<td>zount</td>
<td>O(log(n)) n 是当前有序集合成员的个数</td>
</tr>
<tr>
<td>zremrangebyrank key start end</td>
<td>O(log(n)+k) k 是要删除的成员个数，n 是当前有序集合成员个数</td>
</tr>
<tr>
<td>zremrangebyscore key min max</td>
<td>O(log(n)+k) k 是要删除的成员个数，n 是当前有序集合成员个数</td>
</tr>
<tr>
<td>zinterstore destination numkeys key [key ...]</td>
<td>O(n<em>k) + O(m</em>log(m)) n 是成员数最小的有序集合，k 是有序集合的个数，m 是结果集中成员的个数</td>
</tr>
<tr>
<td>zunionstore destination numkeys key [kye...]</td>
<td>O(n) + O(m*log(m)) n 是所有有序集合成员个数和，m 是结果集中成员个数</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis 内部编码]]></title>
    <link href="https://saup007.github.io/14999625423902.html"/>
    <updated>2017-07-14T00:15:42+08:00</updated>
    <id>https://saup007.github.io/14999625423902.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">&lt;!-- more --&gt;</a>
</li>
</ul>
</li>
<li>
<a href="#toc_1">String 内部编码</a>
<ul>
<li>
<a href="#toc_2">Hash 内部编码</a>
</li>
<li>
<a href="#toc_3">List 内部编码</a>
</li>
<li>
<a href="#toc_4">SET 内部编码</a>
</li>
<li>
<a href="#toc_5">ZSET 内部编码</a>
</li>
</ul>


<h3 id="toc_0">&lt;!-- more --&gt;</h3>

<h2 id="toc_1">String 内部编码</h2>

<ul>
<li>int：8 个字节的长整型</li>
<li>embstr：&lt;= 39 个字符的字符串</li>
<li>raw：&gt; 39 个字符的字符串</li>
</ul>

<h2 id="toc_2">Hash 内部编码</h2>

<ul>
<li>ziplist 压缩列表</li>
</ul>

<blockquote>
<p>当 Hash 元素个数小于 hash-max-ziplist-entries(default 512 个)，同时所有值都小于 hash-max-ziplist-value(default 64 字节)，选用 ziplist 做为 Hash 内部实现</p>
</blockquote>

<p>ziplist 使用更加紧凑的结构实现多个元素连续存在，比 hashtable 节省内存</p>

<ul>
<li>hashtable 哈希表</li>
</ul>

<blockquote>
<p>当 Hash 无法满足 ziplist 时，使用 hashtable 作为 Hash 内部实现，因为此时 ziplist 读写效率下降，而 hashtable 的读写时间复杂度为 O(1)</p>
</blockquote>

<h2 id="toc_3">List 内部编码</h2>

<ul>
<li>ziplist 压缩列表</li>
</ul>

<blockquote>
<p>当 List 元素个数小于 list-max-ziplist-entries(default 512 个)，同时列表中每个元素值都小于 list-max-ziplist-value(default 64 字节)，选用 ziplist 做为 List 内部实现减少内存使用</p>
</blockquote>

<ul>
<li>linkedlist 链表</li>
</ul>

<blockquote>
<p>当 List 无法满足 ziplist 条件时，使用 linkedlist 做为内部实现</p>
</blockquote>

<p>Redis 3.2 提供 quicklist 内部内部编码，简单说是一个 ziplist 为节点的 linkedlist，结合 ziplist 和 linkedlist 优势，为列表型提供更优秀的编码，设计原理参考 <a href="https://matt.sh/redis-quicklist">redis-quicklist</a></p>

<h2 id="toc_4">SET 内部编码</h2>

<ul>
<li>intset 整数集合</li>
</ul>

<blockquote>
<p>当集合中元素都是整数且元素个数小于 set-max-intset-entries(default 512个)，采用 intset 作为内部实现，减少内存使用</p>
</blockquote>

<ul>
<li>hashtable 哈希表</li>
</ul>

<blockquote>
<p>当集合类型无法满足 intset ,使用 hashtable 作为集合的内部 实现</p>
</blockquote>

<h2 id="toc_5">ZSET 内部编码</h2>

<ul>
<li>ziplist 压缩列表</li>
</ul>

<blockquote>
<p>当有序集合的元素个数小于 zset-max-ziplist-entries(default 128个)，同时每个元素的值都小于 zset-max-ziplist-value(default 64 字节)，会使用 ziplist 作为有序集合内部实现，有效减少内存使用</p>
</blockquote>

<ul>
<li>skiplist 跳跃表</li>
</ul>

<blockquote>
<p>当 ziplist 不满足条件时，使用 skiplist 作为有序集合内部实现，此时 ziplist 读写效率下降</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Percona XtraDB Cluster vs Galera Cluster vs MySQL Group Replication]]></title>
    <link href="https://saup007.github.io/14999530972668.html"/>
    <updated>2017-07-13T21:38:17+08:00</updated>
    <id>https://saup007.github.io/14999530972668.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Overview</a>
<ul>
<li>
<a href="#toc_1">Galera Cluster</a>
</li>
<li>
<a href="#toc_2">Percona XtraDB Cluster</a>
</li>
<li>
<a href="#toc_3">MySQL Group Replication</a>
</li>
<li>
<a href="#toc_4">MySQL InnoDB Cluster</a>
</li>
</ul>
</li>
<li>
<a href="#toc_5">Similarities</a>
<ul>
<li>
<a href="#toc_6">Similar - Use Cases</a>
</li>
<li>
<a href="#toc_7">Similar Limitation</a>
</li>
</ul>
</li>
<li>
<a href="#toc_8">Differences GR &amp; Galera</a>
<ul>
<li>
<a href="#toc_9">Group Communication System 组通信系统</a>
</li>
<li>
<a href="#toc_10">Binlogs &amp; Gcache</a>
</li>
<li>
<a href="#toc_11">Node Provisioning 节点配置</a>
</li>
<li>
<a href="#toc_12">GTID vs. Seqno</a>
</li>
<li>
<a href="#toc_13">Partition Handling</a>
</li>
<li>
<a href="#toc_14">Full Solution or Plugin</a>
</li>
<li>
<a href="#toc_15">Flow Control 流控制</a>
</li>
<li>
<a href="#toc_16">WAN Support</a>
</li>
<li>
<a href="#toc_17">OS Support</a>
</li>
<li>
<a href="#toc_18">Schema Changes - DDL</a>
</li>
</ul>
</li>
<li>
<a href="#toc_19">Differences PXC &amp; Galera</a>
<ul>
<li>
<a href="#toc_20">PXC Strict Mode</a>
</li>
<li>
<a href="#toc_21">ProxySQL 集成</a>
</li>
<li>
<a href="#toc_22">性能提升</a>
</li>
</ul>
</li>
<li>
<a href="#toc_23">Limitations</a>
</li>
<li>
<a href="#toc_24">Known Issues</a>
<ul>
<li>
<a href="#toc_25">Galera Cluster/PXC Issues</a>
</li>
<li>
<a href="#toc_26">Group Replication Issues</a>
<ul>
<li>
<a href="#toc_27">分区容忍问题，不能防止脑裂</a>
</li>
<li>
<a href="#toc_28">减少冲突</a>
</li>
<li>
<a href="#toc_29">稳定性</a>
</li>
<li>
<a href="#toc_30">可用性</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_31">Q &amp; A</a>
</li>
<li>
<a href="#toc_32">Performance Tests</a>
</li>
</ul>


<span id="more"></span><!-- more -->

<h2 id="toc_0">Overview</h2>

<h3 id="toc_1">Galera Cluster</h3>

<ul>
<li>由 Coder&lt;!----&gt;ship 开发 <a href="http://galeracluster.com">官网</a></li>
<li>包含在MariaDB，在Percona、MySQL 都可以使用</li>
</ul>

<p>Galera Cluster 是一个基于 InnoDB 多主的同步复制，可以读写任何节点，即使失去任何一个节点也不影响业务中断，而且无需复杂的 failover 操作。</p>

<h3 id="toc_2">Percona XtraDB Cluster</h3>

<ul>
<li>由 Percona 开发，在 Galera 基础打 Patch <a href="https://www.percona.com/software/mysql-database/percona-xtradb-cluster">官网</a></li>
<li>自 2012 年 4 月可用</li>
<li>附加的特性

<ul>
<li>PFS 扩展支持</li>
<li>SST/XtraBackup 方式的改变</li>
<li>PXC Strict mode *</li>
<li>ProxySQL 集成 *</li>
<li>提升性能 *</li>
</ul></li>
</ul>

<h3 id="toc_3">MySQL Group Replication</h3>

<ul>
<li>由 Oracle 官方开发</li>
<li>2016 年 12 月 MySQL 5.7.17 发布 GA</li>
<li>MySQL InnoDB Cluster 整体解决方案</li>
</ul>

<p>MySQL Group Replication 是一个 MySQL Server Plugin，提供分布式状态机复制与 Server 强大协调，当在一个 Group Replication 时，Server 将自动协调，每个节点都可以自动处理更新，自动检测，有一个 membership service 维护一个 view，记录组内 记录可见成员在某个时间点一致性和高可用性的，当任何一个成加入或离开，view 就会相应的更新</p>

<h3 id="toc_4">MySQL InnoDB Cluster</h3>

<p><img src="media/14994844676002/14994853997910.jpg" alt="" style="width:610px;"/></p>

<h2 id="toc_5">Similarities</h2>

<ul>
<li>MySQL/MariaDB</li>
<li>复制方法</li>
<li>所有节点都有全部的数据 - 读仅发生在当前本地节点</li>
<li>都需要 InnoDB/XtraDB 引擎</li>
<li>都支持 多主的拓扑 (Active-active multi-master Topology)

<ul>
<li>写多主节点</li>
<li>不需要复杂的 Failover 操作</li>
</ul></li>
<li>节点管理，加入和离开都是完全自动处理的</li>
<li>执行和写都是按全局的顺序进行的</li>
<li>数据一致性</li>
<li>乐观锁 / 最早提交的先赢</li>
<li>Quorum - 防止脑裂</li>
</ul>

<h3 id="toc_6">Similar - Use Cases</h3>

<ul>
<li>严格的持久化环境</li>
<li>同时定入多个节点，保证数据一致性</li>
<li>减少故障转移时间 (Reduce failover time)</li>
</ul>

<h3 id="toc_7">Similar Limitation</h3>

<ul>
<li>大事务或长事务

<ul>
<li>很大的可能失败</li>
<li>大事务导致在有效事务</li>
</ul></li>
<li>热点，多个节点更新同一行数据</li>
<li>只有一个节点写，是最好的解决方案</li>
</ul>

<h2 id="toc_8">Differences GR &amp; Galera</h2>

<ul>
<li>Group Communication System 组通信系统</li>
<li>Binlogs &amp; Gcache</li>
<li>Node Provisioning 节点配置</li>
<li>GTID vs Seqno</li>
<li>Partition Handling 分区控制</li>
<li>Full Solution or Plugin</li>
<li>Flow Control 流控制</li>
<li>WAN Support</li>
<li>OS Support</li>
<li>Schema Changes DDL</li>
</ul>

<h3 id="toc_9">Group Communication System 组通信系统</h3>

<ul>
<li><p>Galera</p>

<ul>
<li>标志的单环顺序 Totem Single-ring Ordering</li>
<li>所有节点都必须有 ACK 消息</li>
</ul></li>
<li><p>MySQL Group Replication</p>

<ul>
<li>基于 Paxos</li>
<li>Paxos 只要求大多数 ACK 消息</li>
</ul></li>
</ul>

<h3 id="toc_10">Binlogs &amp; Gcache</h3>

<ul>
<li><p>Galera Cluster/PXC</p>

<ul>
<li>uses binlog row events</li>
<li>but does not require binary logging</li>
<li>writes events to Gcache (con gurable size)</li>
</ul></li>
<li><p>MySQL Group Replication</p>

<ul>
<li>requires binary logging</li>
</ul></li>
</ul>

<h3 id="toc_11">Node Provisioning 节点配置</h3>

<ul>
<li><p>Galera Cluster/PXC</p>

<ul>
<li>has State Snapshot Transfer (SST) 全量同步

<ul>
<li>Percona XtraBackup (Recommended)</li>
<li>rsync</li>
<li>mysqldump</li>
</ul></li>
<li>incremental State Transfer (IST) using GCache 增量同步</li>
</ul></li>
<li><p>MySQL Group Replication</p>

<ul>
<li>没有自动全量同步，除非保留所有 Binlog</li>
<li>用于同步的异步复制通道</li>
</ul></li>
</ul>

<h3 id="toc_12">GTID vs. Seqno</h3>

<ul>
<li><p>Galera Cluster/PXC</p>

<ul>
<li>has a seqno which is a incrementing number</li>
</ul></li>
<li><p>MySQL Group Replication</p>

<ul>
<li>依赖 MySQL GTID</li>
<li>writes to a cluster create GTID events on the GR Cluster UUID</li>
</ul></li>
</ul>

<h3 id="toc_13">Partition Handling</h3>

<ul>
<li><p>Galera Cluster/PXC</p>

<ul>
<li>A partitioned node will refuse reads/writes (con gurable)</li>
<li>A partitioned node will automatically recover and rejoin </li>
</ul></li>
<li><p>MySQL Group Replication</p>

<ul>
<li>A partitioned node will accept reads</li>
<li>A partitioned node will accept write requests, but will hang forever</li>
<li>A partitioned node needs to be manually rejoined to the cluster</li>
</ul></li>
</ul>

<h3 id="toc_14">Full Solution or Plugin</h3>

<ul>
<li>Plugin

<ul>
<li>Group Replication is a &#39;Replication Plugin&#39;</li>
<li>several split brain bugs in current code ( fixes pending!)</li>
</ul></li>
<li><p>Solution</p>

<ul>
<li>Galera Cluster 不处理应用连接</li>
<li>与 GR 相比有更强的防止脑裂</li>
<li>MySQL InnoDB Cluster (w. MySQLRouter)</li>
</ul></li>
<li><p>Full Solution </p>

<ul>
<li>Percona XtraDB Cluster (w. ProxySQL)</li>
<li>集成 ProxySQL</li>
<li>严格的 mode，防止使用限制 </li>
</ul></li>
</ul>

<h3 id="toc_15">Flow Control 流控制</h3>

<p>防止太慢的节点，被落下太远</p>

<ul>
<li><p>Galera Cluster/PXC</p>

<ul>
<li>当一个节点慢到一个限制，阻止所有节点写</li>
<li>Flow Control 的消息已经发送</li>
<li>low defaults; Galera: 16(*), PXC: 100</li>
<li>Tell others to stop writes</li>
</ul></li>
<li><p>MySQL Group Replication</p>

<ul>
<li>每个节点都有每个成员的统计信息</li>
<li>每个独立的节点决定写的阈值</li>
<li>high default: 25000</li>
<li>如果有节点太慢，其他节点放慢写速度</li>
</ul></li>
</ul>

<h3 id="toc_16">WAN Support</h3>

<ul>
<li><p>Galera Cluster/PXC</p>

<ul>
<li>投票权重</li>
<li>调节网络通信设置</li>
<li>减少分段网络流量</li>
<li>仲裁人</li>
</ul></li>
<li><p>MySQL Group Replication</p>

<ul>
<li>不建议在  WAN 上使用</li>
</ul></li>
</ul>

<h3 id="toc_17">OS Support</h3>

<ul>
<li><p>Galera</p>

<ul>
<li>FreeBSD &amp; Linux</li>
</ul></li>
<li><p>Galera Cluster/PXC</p>

<ul>
<li>Linux</li>
</ul></li>
<li><p>MySQL Group Replication</p>

<ul>
<li>Linux, Windows, Solaris, OSX, FreeBSD</li>
</ul></li>
</ul>

<h3 id="toc_18">Schema Changes - DDL</h3>

<ul>
<li><p>Galera Cluster/PXC</p>

<ul>
<li>Total Order Isolation</li>
<li>All writes will be blocked during Writes on other nodes will be terminated</li>
<li>Workarounds 变通办法

<ul>
<li>pt-online-schema-change</li>
<li>wsrep_osu_method=RSU

<ul>
<li>更多的操作工作</li>
<li>并不是所有 DDL 可行</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>MySQL Group Replication</p>

<ul>
<li>DDL 并不会阻塞写，像平常使用一样</li>
<li>仅建议在单主模式下使用 (因为 DDL 并没有冲突检测)</li>
</ul></li>
</ul>

<h2 id="toc_19">Differences PXC &amp; Galera</h2>

<ul>
<li>扩展 PFS 支持</li>
<li>SST/XtraBackup 方式的改变</li>
<li>Bug-Fixes</li>
<li>PXC Strict Mode - PXC 严格的 Mode</li>
<li>ProxySQL 集成</li>
<li>性能提升</li>
</ul>

<h3 id="toc_20">PXC Strict Mode</h3>

<p>预防实验性或不支持的特性</p>

<ul>
<li>仅支持 InnoDB 的操作</li>
<li>预防修改 binlog_format!=ROW</li>
<li>需要 Table 有主键</li>
<li>禁用不支持的特性

<ul>
<li>GET_LOCK,LOCK TABLES,CTAS</li>
<li>FLUSH TABLES <tables> WITH READ LOCK</li>
<li>tx_isolation=SERIALIZABLE</li>
</ul></li>
</ul>

<h3 id="toc_21">ProxySQL 集成</h3>

<p>ProxySQL 在 PXC 当负载均衡的角色</p>

<ul>
<li>proxysql-admin 配置工具</li>
<li><p>ProxySQL schedulers</p>

<ul>
<li>健康检查</li>
<li>重新配置节点</li>
</ul></li>
<li><p>PXC 维护模式</p>

<ul>
<li>tell load balancer to rebalance load</li>
</ul></li>
</ul>

<h3 id="toc_22">性能提升</h3>

<ul>
<li>可伸缩性 fixs PXC 5.7.17</li>
<li><p>新的默认值</p>

<ul>
<li> gcs.fc_limit=100</li>
<li> evs.send_window=10</li>
<li> evs.user_send_window=4</li>
</ul></li>
</ul>

<p><img src="media/14994844676002/14994914047051.jpg" alt=""/></p>

<h2 id="toc_23">Limitations</h2>

<ul>
<li><p>Galera Cluster/PXC</p>

<ul>
<li>InnoDB/XtraDB Only</li>
<li>tx_isolation=SERIALIZABLE</li>
<li>GET_LOCK()</li>
<li>LOCK TABLES</li>
<li>SELECT ... FOR UPDATE</li>
<li>Careful with ALTER TABLE ... IMPORT/EXPORT</li>
<li>Capped maximum transaction size 最大事务</li>
<li>XA transactions</li>
</ul></li>
<li><p>Group Replication</p>

<ul>
<li>InnoDB/XtraDB Only</li>
<li>tx_isolation=SERIALIZABLE</li>
<li>GET_LOCK()</li>
<li>LOCK TABLES</li>
<li>SELECT ... FOR UPDATE</li>
<li>CarefulwithALTER TABLE ... IMPORT/EXPORT.</li>
<li>Careful with large transactions</li>
<li>no support for tables with multi-level foreign key dependencies, can create inconsistencies</li>
</ul></li>
</ul>

<h2 id="toc_24">Known Issues</h2>

<h3 id="toc_25">Galera Cluster/PXC Issues</h3>

<ul>
<li><p>Crashes due to background thread handling trx<br/>
processing</p>

<ul>
<li>mysql-wsrep#306: stored procedure aborts</li>
<li>mysql-wsrep#305: event scheduler</li>
<li>mysql-wsrep#304: local scope functions such as CURRENT_USER()</li>
</ul></li>
<li><p>Various crashes related to DDL</p>

<ul>
<li>mysql-wsrep#301:runningSHOW CREATE TABLE in multiple nodes with DDL can cause crash.</li>
<li>mysql-wsrep#275: Aborting trx leaves behind open tables in cache can cause crash</li>
</ul></li>
<li><p>Concurrent DDLs using wsrep_OSU_method=RSU crash/inconsistency issues</p>

<ul>
<li>mysql-wsrep#283 &amp; mysql-wsrep#282</li>
</ul></li>
<li><p>Shutdown issues</p>

<ul>
<li>mysql-wsrep#303: cleanup during shutdown fails to clear the EXPLICT MDL locks (FTWRL)</li>
<li>mysql-wsrep#273: Not getting clean shutting down message if we start the server with unknown variable</li>
<li>mysql-wsrep#279: Trying to access stale binlog handler leads to crash </li>
</ul></li>
</ul>

<h3 id="toc_26">Group Replication Issues</h3>

<h4 id="toc_27">分区容忍问题，不能防止脑裂</h4>

<pre><code>* #84727: partitioned nodes still accept writes: queries hang (~Fixed in 5.7.20)
* #84728: GR failure at start still starts MySQL (~Fixed in 8.0.2)
* #84729: block reads on partitioned nodes
* #84733: not possible to start with super_read_only=1 (Fixed in 8.0.2)
* #84784: Nodes Do Not Reconnect
* #84795: STOP GROUP_REPLICATION sets super_read_only=off
</code></pre>

<h4 id="toc_28">减少冲突</h4>

<pre><code>* #84731: mysql client connections get stuck during GR start
</code></pre>

<h4 id="toc_29">稳定性</h4>

<pre><code>* #84785: Prevent Large Transactions in Group Replication (~Fixed in 5.7.19)
* #84792: Member using 100% CPU in idle cluster (*)
* #84796: GR Member status is wrong
</code></pre>

<h4 id="toc_30">可用性</h4>

<pre><code>* #84674: unresolved hostnames block GR from starting (~Fixed in 5.7.18)
* #84794: cannot kill query that is stuck inside GR
* #84798: Group Replication can use some verbosity in the error log
</code></pre>

<h2 id="toc_31">Q &amp; A</h2>

<p>这个看原 PDF 吧。</p>

<h2 id="toc_32">Performance Tests</h2>

<p><img src="media/14994844676002/14994921791637.jpg" alt=""/></p>

]]></content>
  </entry>
  
</feed>
